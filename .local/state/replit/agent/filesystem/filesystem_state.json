{"file_contents":{"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n","size_bytes":81},"client/src/lib/utils.ts":{"content":"\nimport { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n","size_bytes":170},"client/src/index.css":{"content":"\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n    --primary: 221.2 83.2% 53.3%;\n    --primary-foreground: 210 40% 98%;\n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 221.2 83.2% 53.3%;\n    --radius: 0.5rem;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n    font-family: 'Lato', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n  }\n}\n\n/* Leaflet map styles */\n.leaflet-container {\n  width: 100%;\n  height: 100%;\n}\n","size_bytes":1147},"client/src/components/Header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport { MapPin, Menu } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useState } from \"react\";\n\nexport function Header() {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"container mx-auto px-4 h-16 flex items-center justify-between\">\n        <Link href=\"/\">\n          <a className=\"flex items-center gap-2 hover-elevate rounded-lg px-3 py-2\" data-testid=\"link-logo\">\n            <MapPin className=\"h-6 w-6 text-primary\" />\n            <span className=\"font-bold text-xl\">SafeTravel</span>\n          </a>\n        </Link>\n\n        <nav className=\"hidden md:flex items-center gap-6\">\n          <Link href=\"/\">\n            <a className=\"text-sm font-medium hover:text-primary transition-colors\" data-testid=\"link-home\">\n              Home\n            </a>\n          </Link>\n          <Link href=\"/map\">\n            <a className=\"text-sm font-medium hover:text-primary transition-colors\" data-testid=\"link-map\">\n              Safety Map\n            </a>\n          </Link>\n          <Link href=\"/trips\">\n            <a className=\"text-sm font-medium hover:text-primary transition-colors\" data-testid=\"link-trips\">\n              My Trips\n            </a>\n          </Link>\n          <Link href=\"/about\">\n            <a className=\"text-sm font-medium hover:text-primary transition-colors\" data-testid=\"link-about\">\n              About\n            </a>\n          </Link>\n        </nav>\n\n        <div className=\"flex items-center gap-2\">\n          <ThemeToggle />\n          <Button className=\"hidden md:inline-flex\" data-testid=\"button-get-started\">\n            Get Started\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"md:hidden\"\n            onClick={() => setIsMenuOpen(!isMenuOpen)}\n            data-testid=\"button-menu-toggle\"\n          >\n            <Menu className=\"h-6 w-6\" />\n          </Button>\n        </div>\n      </div>\n\n      {isMenuOpen && (\n        <div className=\"md:hidden border-t bg-background p-4\">\n          <nav className=\"flex flex-col gap-4\">\n            <Link href=\"/\">\n              <a className=\"text-sm font-medium hover:text-primary transition-colors\" onClick={() => setIsMenuOpen(false)}>\n                Home\n              </a>\n            </Link>\n            <Link href=\"/map\">\n              <a className=\"text-sm font-medium hover:text-primary transition-colors\" onClick={() => setIsMenuOpen(false)}>\n                Safety Map\n              </a>\n            </Link>\n            <Link href=\"/trips\">\n              <a className=\"text-sm font-medium hover:text-primary transition-colors\" onClick={() => setIsMenuOpen(false)}>\n                My Trips\n              </a>\n            </Link>\n            <Link href=\"/about\">\n              <a className=\"text-sm font-medium hover:text-primary transition-colors\" onClick={() => setIsMenuOpen(false)}>\n                About\n              </a>\n            </Link>\n            <Button className=\"w-full\" data-testid=\"button-mobile-get-started\">\n              Get Started\n            </Button>\n          </nav>\n        </div>\n      )}\n    </header>\n  );\n}\n","size_bytes":3382},"client/src/components/MapView.jsx":{"content":"\nimport { useEffect, useRef } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\n// Fix for default marker icons in Leaflet with bundlers\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\n});\n\nexport default function MapView({ \n  center = [51.505, -0.09], \n  zoom = 13, \n  markers = [], \n  route = null,\n  height = '500px' \n}) {\n  const mapRef = useRef(null);\n  const mapInstanceRef = useRef(null);\n  const markersLayerRef = useRef(null);\n  const routeLayerRef = useRef(null);\n\n  useEffect(() => {\n    // Initialize map only once\n    if (!mapInstanceRef.current) {\n      mapInstanceRef.current = L.map(mapRef.current).setView(center, zoom);\n\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n        maxZoom: 19,\n      }).addTo(mapInstanceRef.current);\n\n      markersLayerRef.current = L.layerGroup().addTo(mapInstanceRef.current);\n      routeLayerRef.current = L.layerGroup().addTo(mapInstanceRef.current);\n    }\n\n    return () => {\n      // Cleanup on unmount\n      if (mapInstanceRef.current) {\n        mapInstanceRef.current.remove();\n        mapInstanceRef.current = null;\n      }\n    };\n  }, []);\n\n  // Update map center and zoom\n  useEffect(() => {\n    if (mapInstanceRef.current) {\n      mapInstanceRef.current.setView(center, zoom);\n    }\n  }, [center, zoom]);\n\n  // Update markers\n  useEffect(() => {\n    if (markersLayerRef.current && mapInstanceRef.current) {\n      markersLayerRef.current.clearLayers();\n\n      markers.forEach((marker) => {\n        const leafletMarker = L.marker([marker.lat, marker.lng]);\n        \n        if (marker.label) {\n          leafletMarker.bindPopup(marker.label);\n        }\n        \n        if (marker.icon) {\n          const customIcon = L.icon({\n            iconUrl: marker.icon,\n            iconSize: [25, 41],\n            iconAnchor: [12, 41],\n            popupAnchor: [1, -34],\n          });\n          leafletMarker.setIcon(customIcon);\n        }\n\n        leafletMarker.addTo(markersLayerRef.current);\n      });\n\n      // Auto-fit bounds if multiple markers\n      if (markers.length > 1) {\n        const bounds = L.latLngBounds(markers.map(m => [m.lat, m.lng]));\n        mapInstanceRef.current.fitBounds(bounds, { padding: [50, 50] });\n      }\n    }\n  }, [markers]);\n\n  // Update route\n  useEffect(() => {\n    if (routeLayerRef.current) {\n      routeLayerRef.current.clearLayers();\n\n      if (route) {\n        let coordinates = route.coordinates || route.geometry || route;\n        \n        if (Array.isArray(coordinates) && coordinates.length > 0) {\n          // Handle both GeoJSON format [lng, lat] and standard [lat, lng]\n          const latlngs = coordinates.map(coord => {\n            return Array.isArray(coord) && coord.length === 2\n              ? [coord[1], coord[0]] // GeoJSON [lng, lat] -> Leaflet [lat, lng]\n              : coord;\n          });\n\n          const polyline = L.polyline(latlngs, {\n            color: route.color || '#3388ff',\n            weight: route.weight || 5,\n            opacity: route.opacity || 0.7,\n          }).addTo(routeLayerRef.current);\n          \n          // Auto-fit bounds to show entire route\n          if (mapInstanceRef.current && latlngs.length > 1) {\n            mapInstanceRef.current.fitBounds(polyline.getBounds(), { padding: [50, 50] });\n          }\n        }\n      }\n    }\n  }, [route]);\n\n  return (\n    <div className=\"w-full rounded-lg overflow-hidden shadow-lg border border-gray-200\">\n      <div ref={mapRef} style={{ height, width: '100%' }} />\n      <div className=\"text-xs text-gray-500 p-2 bg-gray-50\">\n        Note: Make sure to include Leaflet CSS in your HTML: \n        <code className=\"ml-1 bg-gray-200 px-1 rounded\">\n          &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\" /&gt;\n        </code>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4246},"client/src/pages/Home.jsx":{"content":"\nimport { useState } from 'react';\nimport SearchBar from '../components/SearchBar';\nimport MapView from '../components/MapView';\nimport { geocode } from '../lib/geocode';\n\nexport default function Home() {\n  const [mapCenter, setMapCenter] = useState([51.505, -0.09]); // Default: London\n  const [mapZoom, setMapZoom] = useState(13);\n  const [markers, setMarkers] = useState([]);\n  const [route, setRoute] = useState(null);\n  const [isSearching, setIsSearching] = useState(false);\n  const [searchError, setSearchError] = useState(null);\n  const [showRouteForm, setShowRouteForm] = useState(false);\n  const [waypoints, setWaypoints] = useState([{ query: '' }, { query: '' }]);\n  const [routeMode, setRouteMode] = useState('car');\n  const [pathType, setPathType] = useState('shortest');\n  const [isCalculatingRoute, setIsCalculatingRoute] = useState(false);\n  const [routeInfo, setRouteInfo] = useState(null);\n\n  const handleSearch = async (query) => {\n    setIsSearching(true);\n    setSearchError(null);\n\n    try {\n      const result = await geocode(query);\n      \n      if (result) {\n        setMapCenter([result.lat, result.lng]);\n        setMapZoom(14);\n        setMarkers([\n          {\n            lat: result.lat,\n            lng: result.lng,\n            label: result.display_name,\n          },\n        ]);\n      } else {\n        setSearchError('Location not found. Please try a different search.');\n      }\n    } catch (error) {\n      console.error('Search error:', error);\n      setSearchError('An error occurred while searching. Please try again.');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  const handleCalculateRoute = async () => {\n    setIsCalculatingRoute(true);\n    setSearchError(null);\n    setRoute(null);\n    setRouteInfo(null);\n\n    try {\n      // Geocode all waypoints\n      const geocodedWaypoints = await Promise.all(\n        waypoints.map(async (wp) => {\n          if (!wp.query.trim()) return null;\n          const result = await geocode(wp.query);\n          return result ? { lat: result.lat, lng: result.lng } : null;\n        })\n      );\n\n      const validWaypoints = geocodedWaypoints.filter(wp => wp !== null);\n\n      if (validWaypoints.length < 2) {\n        setSearchError('Please provide at least 2 valid locations');\n        setIsCalculatingRoute(false);\n        return;\n      }\n\n      // Call route API\n      const response = await fetch('http://localhost:5000/route', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          waypoints: validWaypoints,\n          mode: routeMode,\n          pathType: pathType,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to calculate route');\n      }\n\n      const data = await response.json();\n\n      if (data.success) {\n        setRoute({ geometry: data.route.geometry });\n        setRouteInfo(data.route);\n        \n        // Add markers for waypoints\n        setMarkers(validWaypoints.map((wp, idx) => ({\n          lat: wp.lat,\n          lng: wp.lng,\n          label: `Waypoint ${idx + 1}`,\n        })));\n      }\n    } catch (error) {\n      console.error('Route calculation error:', error);\n      setSearchError('Failed to calculate route. Please try again.');\n    } finally {\n      setIsCalculatingRoute(false);\n    }\n  };\n\n  const handleSaveJourney = async () => {\n    if (!routeInfo) {\n      alert('No route to save');\n      return;\n    }\n\n    try {\n      const response = await fetch('http://localhost:5000/user/journeys', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify({\n          title: `Journey from ${waypoints[0].query} to ${waypoints[waypoints.length - 1].query}`,\n          description: `${routeMode} route via ${pathType} path`,\n          destinations: waypoints.map(wp => wp.query).filter(q => q.trim()),\n          start: waypoints[0]?.query || '',\n          end: waypoints[waypoints.length - 1]?.query || '',\n          mode: routeMode,\n          distance: routeInfo.distanceKm,\n          duration: routeInfo.durationMin,\n          riskScore: routeInfo.riskScore,\n          metadata: {\n            pathType: pathType,\n            geometry: routeInfo.geometry\n          }\n        }),\n      });\n\n      if (response.status === 401) {\n        alert('Please log in to save journeys');\n        return;\n      }\n\n      if (!response.ok) {\n        throw new Error('Failed to save journey');\n      }\n\n      const data = await response.json();\n      if (data.success) {\n        alert('Journey saved successfully!');\n      }\n    } catch (error) {\n      console.error('Error saving journey:', error);\n      alert('Failed to save journey. Please try again.');\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <section className=\"hero mb-12\">\n        <h1 className=\"text-5xl font-bold mb-4\">Welcome to SafeTravel</h1>\n        <p className=\"text-xl text-gray-600 mb-6\">\n          Discover safe destinations around the world\n        </p>\n        <div className=\"mb-4\">\n          <SearchBar \n            onSearch={handleSearch} \n            placeholder=\"Search for a location...\"\n          />\n        </div>\n        {isSearching && (\n          <p className=\"text-blue-600 mb-4\">Searching...</p>\n        )}\n        {searchError && (\n          <p className=\"text-red-600 mb-4\">{searchError}</p>\n        )}\n        <div className=\"flex gap-3 mb-4\">\n          <button\n            onClick={() => setShowRouteForm(!showRouteForm)}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n          >\n            {showRouteForm ? 'Hide Route Planner' : 'Plan a Route'}\n          </button>\n        </div>\n\n        {showRouteForm && (\n          <div className=\"mb-6 p-6 bg-gray-50 rounded-lg border border-gray-200\">\n            <h3 className=\"text-xl font-semibold mb-4\">Route Planning</h3>\n            \n            {waypoints.map((wp, idx) => (\n              <div key={idx} className=\"mb-3\">\n                <label className=\"block text-sm font-medium mb-1\">\n                  Waypoint {idx + 1}\n                </label>\n                <input\n                  type=\"text\"\n                  value={wp.query}\n                  onChange={(e) => {\n                    const newWaypoints = [...waypoints];\n                    newWaypoints[idx].query = e.target.value;\n                    setWaypoints(newWaypoints);\n                  }}\n                  placeholder=\"Enter location...\"\n                  className=\"w-full px-4 py-2 border border-gray-300 rounded-lg\"\n                />\n              </div>\n            ))}\n\n            <div className=\"flex gap-4 mb-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Mode</label>\n                <select\n                  value={routeMode}\n                  onChange={(e) => setRouteMode(e.target.value)}\n                  className=\"px-4 py-2 border border-gray-300 rounded-lg\"\n                >\n                  <option value=\"car\">Car</option>\n                  <option value=\"foot\">Walking</option>\n                  <option value=\"bike\">Cycling</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Path Type</label>\n                <select\n                  value={pathType}\n                  onChange={(e) => setPathType(e.target.value)}\n                  className=\"px-4 py-2 border border-gray-300 rounded-lg\"\n                >\n                  <option value=\"shortest\">Shortest</option>\n                  <option value=\"safest\">Safest (UK only)</option>\n                </select>\n              </div>\n            </div>\n\n            <div className=\"flex gap-3\">\n              <button\n                onClick={handleCalculateRoute}\n                disabled={isCalculatingRoute}\n                className=\"px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors disabled:bg-gray-400\"\n              >\n                {isCalculatingRoute ? 'Calculating...' : 'Calculate Route'}\n              </button>\n\n              {routeInfo && (\n                <button\n                  onClick={handleSaveJourney}\n                  className=\"px-6 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors\"\n                >\n                  Save Journey\n                </button>\n              )}\n            </div>\n\n            {routeInfo && (\n              <div className=\"mt-4 p-4 bg-white rounded-lg border border-gray-200\">\n                <h4 className=\"font-semibold mb-2\">Route Information</h4>\n                <p className=\"text-sm\">Distance: {routeInfo.distanceKm} km</p>\n                <p className=\"text-sm\">Duration: {routeInfo.durationMin} minutes</p>\n                {routeInfo.riskScore !== null && (\n                  <p className=\"text-sm\">Risk Score: {routeInfo.riskScore}/100</p>\n                )}\n              </div>\n            )}\n          </div>\n        )}\n\n        <div className=\"mt-6\">\n          <MapView \n            center={mapCenter} \n            zoom={mapZoom} \n            markers={markers}\n            route={route}\n            height=\"400px\"\n          />\n        </div>\n      </section>\n\n      <section className=\"feature-cards mb-12\">\n        <h2 className=\"text-3xl font-bold mb-6\">Features</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <div className=\"p-6 border rounded-lg\">\n            <h3 className=\"text-xl font-semibold mb-2\">Safety First</h3>\n            <p>Real-time crime data and safety ratings</p>\n          </div>\n          <div className=\"p-6 border rounded-lg\">\n            <h3 className=\"text-xl font-semibold mb-2\">Find Hospitals</h3>\n            <p>Locate nearby medical facilities</p>\n          </div>\n          <div className=\"p-6 border rounded-lg\">\n            <h3 className=\"text-xl font-semibold mb-2\">Safe Hotels</h3>\n            <p>Accommodations in secure areas</p>\n          </div>\n        </div>\n      </section>\n\n      <section className=\"countries mb-12\">\n        <h2 className=\"text-3xl font-bold mb-6\">Popular Countries</h2>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <div className=\"p-4 border rounded-lg text-center\">\n            <p className=\"font-semibold\">United States</p>\n          </div>\n          <div className=\"p-4 border rounded-lg text-center\">\n            <p className=\"font-semibold\">Canada</p>\n          </div>\n          <div className=\"p-4 border rounded-lg text-center\">\n            <p className=\"font-semibold\">United Kingdom</p>\n          </div>\n          <div className=\"p-4 border rounded-lg text-center\">\n            <p className=\"font-semibold\">Japan</p>\n          </div>\n        </div>\n      </section>\n\n      <section className=\"cultures mb-12\">\n        <h2 className=\"text-3xl font-bold mb-6\">Explore Cultures</h2>\n        <p className=\"text-gray-600\">\n          Discover diverse cultures and traditions from around the world while staying safe.\n        </p>\n      </section>\n\n      <section className=\"popular-places\">\n        <h2 className=\"text-3xl font-bold mb-6\">Popular Places</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <div className=\"p-6 border rounded-lg\">\n            <h3 className=\"text-xl font-semibold mb-2\">New York City</h3>\n            <p className=\"text-sm text-gray-600\">Safety Rating: 8/10</p>\n          </div>\n          <div className=\"p-6 border rounded-lg\">\n            <h3 className=\"text-xl font-semibold mb-2\">Tokyo</h3>\n            <p className=\"text-sm text-gray-600\">Safety Rating: 9/10</p>\n          </div>\n          <div className=\"p-6 border rounded-lg\">\n            <h3 className=\"text-xl font-semibold mb-2\">London</h3>\n            <p className=\"text-sm text-gray-600\">Safety Rating: 8/10</p>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":11962},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\";\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n);\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n));\nLabel.displayName = LabelPrimitive.Root.displayName;\n\nexport { Label };\n","size_bytes":718},"server/routes/user.js":{"content":"\nconst express = require('express');\nconst router = express.Router();\nconst pool = require('../db');\n\n// Middleware to check authentication\nconst requireAuth = (req, res, next) => {\n  if (!req.session || !req.session.userId) {\n    return res.status(401).json({ error: 'Authentication required' });\n  }\n  next();\n};\n\n// GET /user/favorites - Get all favorites for logged-in user\nrouter.get('/favorites', requireAuth, async (req, res) => {\n  try {\n    const userId = req.session.userId;\n    \n    const result = await pool.query(\n      'SELECT * FROM favorites WHERE user_id = $1 ORDER BY created_at DESC',\n      [userId]\n    );\n    \n    res.json({\n      success: true,\n      favorites: result.rows\n    });\n  } catch (error) {\n    console.error('Error fetching favorites:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch favorites'\n    });\n  }\n});\n\n// POST /user/favorites - Add a new favorite\nrouter.post('/favorites', requireAuth, async (req, res) => {\n  try {\n    const userId = req.session.userId;\n    const { place } = req.body;\n    \n    if (!place || !place.name || place.latitude === undefined || place.longitude === undefined) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid place data. Required: name, latitude, longitude'\n      });\n    }\n    \n    // Check if favorite already exists\n    const existing = await pool.query(\n      'SELECT id FROM favorites WHERE user_id = $1 AND latitude = $2 AND longitude = $3',\n      [userId, place.latitude, place.longitude]\n    );\n    \n    if (existing.rows.length > 0) {\n      return res.status(409).json({\n        success: false,\n        error: 'This place is already in your favorites'\n      });\n    }\n    \n    // Insert new favorite\n    const result = await pool.query(\n      `INSERT INTO favorites (user_id, place_name, latitude, longitude, notes) \n       VALUES ($1, $2, $3, $4, $5) \n       RETURNING *`,\n      [\n        userId,\n        place.name,\n        place.latitude,\n        place.longitude,\n        place.notes || JSON.stringify(place.tags || {})\n      ]\n    );\n    \n    res.status(201).json({\n      success: true,\n      favorite: result.rows[0]\n    });\n  } catch (error) {\n    console.error('Error adding favorite:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to add favorite'\n    });\n  }\n});\n\n// DELETE /user/favorites/:id - Remove a favorite\nrouter.delete('/favorites/:id', requireAuth, async (req, res) => {\n  try {\n    const userId = req.session.userId;\n    const favoriteId = req.params.id;\n    \n    // Ensure the favorite belongs to the user\n    const result = await pool.query(\n      'DELETE FROM favorites WHERE id = $1 AND user_id = $2 RETURNING *',\n      [favoriteId, userId]\n    );\n    \n    if (result.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Favorite not found or does not belong to you'\n      });\n    }\n    \n    res.json({\n      success: true,\n      message: 'Favorite removed successfully',\n      favorite: result.rows[0]\n    });\n  } catch (error) {\n    console.error('Error removing favorite:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to remove favorite'\n    });\n  }\n});\n\n// POST /user/journeys - Save a journey/trip\nrouter.post('/journeys', requireAuth, async (req, res) => {\n  try {\n    const userId = req.session.userId;\n    const { title, description, destinations, start, end, mode, distance, duration, riskScore, metadata } = req.body;\n    \n    if (!title) {\n      return res.status(400).json({\n        success: false,\n        error: 'Title is required'\n      });\n    }\n    \n    // Build destinations JSON object\n    const destinationsData = {\n      destinations: destinations || [],\n      start: start || null,\n      end: end || null,\n      mode: mode || 'car',\n      distance: distance || null,\n      duration: duration || null,\n      riskScore: riskScore !== undefined ? riskScore : null,\n      metadata: metadata || {}\n    };\n    \n    const result = await pool.query(\n      `INSERT INTO journeys (user_id, title, description, destinations) \n       VALUES ($1, $2, $3, $4) \n       RETURNING *`,\n      [\n        userId,\n        title,\n        description || '',\n        JSON.stringify(destinationsData)\n      ]\n    );\n    \n    res.status(201).json({\n      success: true,\n      journey: result.rows[0]\n    });\n  } catch (error) {\n    console.error('Error saving journey:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to save journey'\n    });\n  }\n});\n\n// GET /user/journeys - Get all journeys for logged-in user\nrouter.get('/journeys', requireAuth, async (req, res) => {\n  try {\n    const userId = req.session.userId;\n    \n    const result = await pool.query(\n      'SELECT * FROM journeys WHERE user_id = $1 ORDER BY created_at DESC',\n      [userId]\n    );\n    \n    res.json({\n      success: true,\n      journeys: result.rows\n    });\n  } catch (error) {\n    console.error('Error fetching journeys:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch journeys'\n    });\n  }\n});\n\nmodule.exports = router;\n","size_bytes":5159},"client/src/components/FeaturesSection.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { \n  Map, \n  Route, \n  Shield, \n  TrendingUp, \n  Bell, \n  Heart,\n  Users,\n  Clock\n} from \"lucide-react\";\n\nconst features = [\n  {\n    icon: Map,\n    title: \"Interactive Safety Maps\",\n    description: \"Explore destinations with color-coded crime data overlays and real-time security information.\",\n  },\n  {\n    icon: Route,\n    title: \"Safe Route Planning\",\n    description: \"Get optimized routes that prioritize your safety while considering distance and time.\",\n  },\n  {\n    icon: Shield,\n    title: \"Security Ratings\",\n    description: \"Every location is rated based on comprehensive crime statistics and local safety data.\",\n  },\n  {\n    icon: TrendingUp,\n    title: \"Safety Trends\",\n    description: \"View historical crime patterns and seasonal safety variations for better planning.\",\n  },\n  {\n    icon: Bell,\n    title: \"Real-Time Alerts\",\n    description: \"Receive notifications about safety concerns and incidents in your planned destinations.\",\n  },\n  {\n    icon: Heart,\n    title: \"Save Favorites\",\n    description: \"Bookmark safe locations and create your personal list of trusted destinations.\",\n  },\n  {\n    icon: Users,\n    title: \"Community Insights\",\n    description: \"Benefit from verified traveler reviews and local safety tips from our community.\",\n  },\n  {\n    icon: Clock,\n    title: \"24/7 Updates\",\n    description: \"Access continuously updated safety data from trusted sources around the clock.\",\n  },\n];\n\nexport function FeaturesSection() {\n  return (\n    <section className=\"py-20 px-4 bg-muted/30\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-bold mb-4\" data-testid=\"heading-features\">\n            Everything You Need to Travel Safely\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n            Comprehensive tools and data to help you make informed decisions about your travel destinations\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {features.map((feature, idx) => {\n            const Icon = feature.icon;\n            return (\n              <Card \n                key={idx} \n                className=\"hover-elevate\"\n                data-testid={`card-feature-${idx}`}\n              >\n                <CardHeader>\n                  <div className=\"mb-4 inline-flex items-center justify-center w-12 h-12 rounded-lg bg-primary/10\">\n                    <Icon className=\"h-6 w-6 text-primary\" />\n                  </div>\n                  <CardTitle className=\"text-lg\">{feature.title}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <CardDescription>{feature.description}</CardDescription>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2992},"client/src/components/StatsSection.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Users, MapPinned, Shield, TrendingUp } from \"lucide-react\";\n\nconst stats = [\n  {\n    icon: Users,\n    value: \"50K+\",\n    label: \"Active Travelers\",\n    description: \"Trust our platform\",\n  },\n  {\n    icon: MapPinned,\n    value: \"200+\",\n    label: \"Cities Covered\",\n    description: \"Worldwide coverage\",\n  },\n  {\n    icon: Shield,\n    value: \"1M+\",\n    label: \"Safety Reports\",\n    description: \"Real-time data points\",\n  },\n  {\n    icon: TrendingUp,\n    value: \"95%\",\n    label: \"Satisfaction Rate\",\n    description: \"From our users\",\n  },\n];\n\nexport function StatsSection() {\n  return (\n    <section className=\"py-16 px-4 bg-primary text-primary-foreground\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n          {stats.map((stat, idx) => {\n            const Icon = stat.icon;\n            return (\n              <div \n                key={idx} \n                className=\"text-center\"\n                data-testid={`stat-item-${idx}`}\n              >\n                <div className=\"flex justify-center mb-4\">\n                  <div className=\"p-3 rounded-full bg-primary-foreground/10\">\n                    <Icon className=\"h-8 w-8\" />\n                  </div>\n                </div>\n                <div className=\"text-4xl font-bold mb-2\" data-testid=\"stat-value\">{stat.value}</div>\n                <div className=\"text-lg font-semibold mb-1\" data-testid=\"stat-label\">{stat.label}</div>\n                <div className=\"text-sm opacity-90\" data-testid=\"stat-description\">{stat.description}</div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":1743},"server/routes/route.js":{"content":"\nconst express = require('express');\nconst router = express.Router();\n\n// Helper function to sample points along a route geometry\nfunction samplePointsAlongRoute(coordinates, numSamples = 10) {\n  if (!coordinates || coordinates.length < 2) return [];\n  \n  const totalPoints = coordinates.length;\n  const step = Math.max(1, Math.floor(totalPoints / numSamples));\n  const sampledPoints = [];\n  \n  for (let i = 0; i < totalPoints; i += step) {\n    if (sampledPoints.length >= numSamples) break;\n    sampledPoints.push(coordinates[i]);\n  }\n  \n  return sampledPoints;\n}\n\n// Helper function to get crime score for a point\nasync function getCrimeScore(lat, lng) {\n  try {\n    const baseUrl = process.env.API_URL || 'http://localhost:5000';\n    const response = await fetch(\n      `${baseUrl}/crime?lat=${lat}&lng=${lng}`\n    );\n    \n    if (!response.ok) return 0;\n    \n    const data = await response.json();\n    return data.success ? data.crimeScore : 0;\n  } catch (error) {\n    console.error('Error fetching crime score:', error);\n    return 0;\n  }\n}\n\n// POST /route - Calculate route with optional safety scoring\nrouter.post('/', async (req, res) => {\n  try {\n    const { waypoints, mode = 'car', pathType = 'shortest' } = req.body;\n    \n    if (!waypoints || !Array.isArray(waypoints) || waypoints.length < 2) {\n      return res.status(400).json({\n        success: false,\n        error: 'At least 2 waypoints are required'\n      });\n    }\n    \n    // Validate waypoints\n    for (const wp of waypoints) {\n      if (!wp.lat || !wp.lng) {\n        return res.status(400).json({\n          success: false,\n          error: 'Each waypoint must have lat and lng'\n        });\n      }\n    }\n    \n    // Build OSRM coordinates string (lng,lat format)\n    const coordinates = waypoints.map(wp => `${wp.lng},${wp.lat}`).join(';');\n    \n    // Map mode to OSRM profile\n    const profileMap = {\n      'car': 'driving',\n      'foot': 'foot',\n      'bike': 'cycling'\n    };\n    const profile = profileMap[mode] || 'driving';\n    \n    // Call OSRM API\n    const osrmUrl = `https://router.project-osrm.org/route/v1/${profile}/${coordinates}?overview=full&geometries=geojson`;\n    \n    const osrmResponse = await fetch(osrmUrl);\n    \n    if (!osrmResponse.ok) {\n      throw new Error(`OSRM API error: ${osrmResponse.status}`);\n    }\n    \n    const osrmData = await osrmResponse.json();\n    \n    if (osrmData.code !== 'Ok' || !osrmData.routes || osrmData.routes.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'No route found between waypoints'\n      });\n    }\n    \n    const route = osrmData.routes[0];\n    const geometry = route.geometry.coordinates; // Array of [lng, lat]\n    const distance = route.distance; // meters\n    const duration = route.duration; // seconds\n    \n    let riskScore = null;\n    \n    // Calculate safety score if requested\n    if (pathType === 'safest') {\n      console.log('Calculating safety score along route...');\n      \n      // Sample ~10 points along the route\n      const sampledPoints = samplePointsAlongRoute(geometry, 10);\n      \n      // Get crime scores for sampled points\n      const crimeScores = await Promise.all(\n        sampledPoints.map(coord => getCrimeScore(coord[1], coord[0])) // lat, lng\n      );\n      \n      // Calculate average crime score\n      const avgCrimeScore = crimeScores.reduce((sum, score) => sum + score, 0) / crimeScores.length;\n      riskScore = Math.round(avgCrimeScore);\n      \n      console.log(`Route risk score: ${riskScore}/100 (avg of ${crimeScores.length} samples)`);\n    }\n    \n    res.json({\n      success: true,\n      route: {\n        geometry: geometry,\n        distance: distance,\n        duration: duration,\n        riskScore: riskScore,\n        distanceKm: (distance / 1000).toFixed(2),\n        durationMin: Math.round(duration / 60),\n      },\n      waypoints: waypoints,\n      mode: mode,\n      pathType: pathType,\n      note: pathType === 'safest' \n        ? 'Risk score calculated by sampling crime data along route. Full safest-route requires graph reweighting (out of scope).'\n        : 'Shortest route calculated via OSRM.'\n    });\n    \n  } catch (error) {\n    console.error('Error calculating route:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to calculate route',\n      message: error.message\n    });\n  }\n});\n\nmodule.exports = router;\n","size_bytes":4382},"client/src/components/Hero.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, Shield, MapPin, TrendingUp } from \"lucide-react\";\nimport { useState } from \"react\";\nimport heroImage from \"@assets/generated_images/Safe_urban_travel_hero_image_6104c3b6.png\";\n\nexport function Hero() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const handleSearch = () => {\n    console.log(\"Searching for:\", searchQuery);\n  };\n\n  return (\n    <div className=\"relative h-[90vh] w-full overflow-hidden\">\n      <div\n        className=\"absolute inset-0 bg-cover bg-center\"\n        style={{ backgroundImage: `url(${heroImage})` }}\n      >\n        <div className=\"absolute inset-0 bg-gradient-to-b from-black/60 via-black/50 to-black/70\" />\n      </div>\n\n      <div className=\"relative z-10 flex flex-col items-center justify-center h-full px-4 text-center\">\n        <h1 className=\"text-5xl md:text-6xl lg:text-7xl font-bold text-white mb-6 max-w-4xl\">\n          Travel with Confidence\n        </h1>\n        <p className=\"text-xl md:text-2xl text-white/90 mb-12 max-w-2xl\">\n          Explore the world safely with real-time crime data, intelligent route planning, and trusted safety insights\n        </p>\n\n        <div className=\"w-full max-w-2xl mb-12\">\n          <div className=\"flex gap-2 bg-white/95 backdrop-blur-sm p-2 rounded-full shadow-xl\">\n            <div className=\"flex-1 flex items-center px-4\">\n              <Search className=\"h-5 w-5 text-muted-foreground mr-2\" />\n              <Input\n                type=\"search\"\n                placeholder=\"Search destinations, cities, or neighborhoods...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"border-0 bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0 text-foreground\"\n                data-testid=\"input-hero-search\"\n              />\n            </div>\n            <Button \n              size=\"lg\" \n              className=\"rounded-full px-8\"\n              onClick={handleSearch}\n              data-testid=\"button-hero-search\"\n            >\n              Search\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-4xl\">\n          <div className=\"flex flex-col items-center text-white\">\n            <div className=\"bg-white/10 backdrop-blur-sm p-4 rounded-full mb-3\">\n              <Shield className=\"h-8 w-8\" />\n            </div>\n            <h3 className=\"font-semibold text-lg mb-1\">Real-Time Safety Data</h3>\n            <p className=\"text-white/80 text-sm\">Live crime statistics and security alerts</p>\n          </div>\n          <div className=\"flex flex-col items-center text-white\">\n            <div className=\"bg-white/10 backdrop-blur-sm p-4 rounded-full mb-3\">\n              <MapPin className=\"h-8 w-8\" />\n            </div>\n            <h3 className=\"font-semibold text-lg mb-1\">Smart Route Planning</h3>\n            <p className=\"text-white/80 text-sm\">AI-powered safe route optimization</p>\n          </div>\n          <div className=\"flex flex-col items-center text-white\">\n            <div className=\"bg-white/10 backdrop-blur-sm p-4 rounded-full mb-3\">\n              <TrendingUp className=\"h-8 w-8\" />\n            </div>\n            <h3 className=\"font-semibold text-lg mb-1\">Safety Trends</h3>\n            <p className=\"text-white/80 text-sm\">Historical analysis and predictions</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3516},"client/src/components/AuthModal.jsx":{"content":"\nimport { useState } from 'react';\nimport axios from 'axios';\n\nexport default function AuthModal({ onClose, onAuthSuccess }) {\n  const [isLogin, setIsLogin] = useState(true);\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  });\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleChange = (e) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n    setError('');\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError('');\n    setIsLoading(true);\n\n    try {\n      if (!isLogin) {\n        // Validate signup\n        if (formData.password !== formData.confirmPassword) {\n          setError('Passwords do not match');\n          setIsLoading(false);\n          return;\n        }\n        if (formData.password.length < 6) {\n          setError('Password must be at least 6 characters');\n          setIsLoading(false);\n          return;\n        }\n      }\n\n      const endpoint = isLogin ? '/auth/login' : '/auth/signup';\n      const payload = isLogin \n        ? { email: formData.email, password: formData.password }\n        : { name: formData.name, email: formData.email, password: formData.password };\n\n      const response = await axios.post(`http://localhost:5000${endpoint}`, payload, {\n        withCredentials: true\n      });\n\n      if (response.data.user) {\n        // Successfully authenticated\n        if (onAuthSuccess) {\n          onAuthSuccess(response.data.user);\n        }\n        onClose();\n      }\n    } catch (err) {\n      console.error('Auth error:', err);\n      setError(err.response?.data?.message || 'Authentication failed. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded-lg p-8 max-w-md w-full mx-4\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <h2 className=\"text-2xl font-bold\">\n            {isLogin ? 'Login' : 'Sign Up'}\n          </h2>\n          <button\n            onClick={onClose}\n            className=\"text-gray-500 hover:text-gray-700 text-2xl\"\n          >\n            &times;\n          </button>\n        </div>\n\n        {error && (\n          <div className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded-lg text-red-800 text-sm\">\n            {error}\n          </div>\n        )}\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {!isLogin && (\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Full Name\n              </label>\n              <input\n                type=\"text\"\n                name=\"name\"\n                value={formData.name}\n                onChange={handleChange}\n                required\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"John Doe\"\n              />\n            </div>\n          )}\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Email\n            </label>\n            <input\n              type=\"email\"\n              name=\"email\"\n              value={formData.email}\n              onChange={handleChange}\n              required\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              placeholder=\"you@example.com\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Password\n            </label>\n            <input\n              type=\"password\"\n              name=\"password\"\n              value={formData.password}\n              onChange={handleChange}\n              required\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              placeholder=\"••••••••\"\n            />\n          </div>\n\n          {!isLogin && (\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Confirm Password\n              </label>\n              <input\n                type=\"password\"\n                name=\"confirmPassword\"\n                value={formData.confirmPassword}\n                onChange={handleChange}\n                required\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"••••••••\"\n              />\n            </div>\n          )}\n\n          <button\n            type=\"submit\"\n            disabled={isLoading}\n            className=\"w-full py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:bg-blue-400\"\n          >\n            {isLoading ? 'Please wait...' : (isLogin ? 'Login' : 'Sign Up')}\n          </button>\n        </form>\n\n        <div className=\"mt-4 text-center\">\n          <button\n            onClick={() => {\n              setIsLogin(!isLogin);\n              setError('');\n              setFormData({ name: '', email: '', password: '', confirmPassword: '' });\n            }}\n            className=\"text-blue-600 hover:underline text-sm\"\n          >\n            {isLogin\n              ? \"Don't have an account? Sign up\"\n              : 'Already have an account? Login'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5644},"client/src/lib/queryClient.ts":{"content":"import { QueryClient } from \"@tanstack/react-query\";\n\nasync function defaultFetcher<T = any>(url: string): Promise<T> {\n  const res = await fetch(url);\n\n  if (!res.ok) {\n    if (res.status >= 500) {\n      throw new Error(`${res.status}: ${res.statusText}`);\n    }\n\n    const message = await res.text();\n    throw new Error(message);\n  }\n\n  return res.json();\n}\n\nexport async function apiRequest<T = any>(\n  url: string,\n  method: string,\n  data?: any\n): Promise<T> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n  });\n\n  if (!res.ok) {\n    if (res.status >= 500) {\n      throw new Error(`${res.status}: ${res.statusText}`);\n    }\n\n    const message = await res.text();\n    throw new Error(message);\n  }\n\n  return res.json();\n}\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: async ({ queryKey }) => {\n        const url = queryKey[0] as string;\n        return defaultFetcher(url);\n      },\n      staleTime: 1000 * 60,\n      refetchOnWindowFocus: false,\n    },\n    mutations: {\n      onError: (error) => {\n        console.error(\"Mutation error:\", error);\n      },\n    },\n  },\n});\n","size_bytes":1242},"attached_assets/content-1760866043056.md":{"content":"[Skip to main content](https://data.police.uk/#content)\n\n- data.police.uk uses cookies to make the site simpler. [Find out more about cookies](https://www.police.uk/pu/cookies/)\n\n\n# Welcome to data.police.uk\n\nThis is the site for open data about crime and policing in England, Wales and Northern Ireland.\n\n\nYou can download [street-level crime, outcome, and stop and search data](https://data.police.uk/data/) in clear and simple CSV format and explore the [API](https://data.police.uk/docs/) containing detailed crime data and information about individual police forces and neighbourhood teams.\n\n\nYou can also download data on police activity, and a range of data collected under the [police annual data requirement (ADR)](https://data.police.uk/data/statistical-data/) including arrests and 101 call handling.\n\n\nAll the data on this site is made available under the [Open Government Licence v3.0](https://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/).\n\n\n- [**Downloads** \\\\\nDownload Police.uk data in batches](https://data.police.uk/data/)\n- [**API docs** \\\\\nAccess Police.uk data via an API](https://data.police.uk/docs/)\n- [**Changelog** \\\\\nSee what's new, see what's coming soon](https://data.police.uk/changelog/)","size_bytes":1241},"README.md":{"content":"\n# SafeTravel - Safe Tourism Platform\n\nA full-stack application for safe travel planning with real-time crime data, hospital locations, hotel recommendations, and intelligent route optimization.\n\n## Overview\n\nSafeTravel helps travelers plan safer journeys by providing:\n- **Crime Data Analysis**: Access UK crime statistics via data.police.uk API\n- **Medical Facilities**: Find nearby hospitals and medical centers using OpenStreetMap data\n- **Safe Accommodations**: Locate hotels and lodging in secure areas\n- **Route Optimization**: Calculate shortest or safest routes with risk scoring\n- **Journey Planning**: Save and manage your travel itineraries\n\n## Tech Stack\n\n- **Frontend**: React + Vite, React Router, Tailwind CSS, Leaflet (maps), Axios\n- **Backend**: Node.js + Express, PostgreSQL, express-session\n- **APIs**: \n  - Nominatim (geocoding)\n  - Overpass API (OpenStreetMap data)\n  - OSRM (routing)\n  - data.police.uk (UK crime data)\n\n## Prerequisites\n\n- Node.js (v16 or higher)\n- PostgreSQL database (Replit PostgreSQL or external provider)\n\n## Database Setup\n\n### Option 1: Replit PostgreSQL (Recommended for Replit)\n\n1. Open the \"Database\" tab in your Repl\n2. Click \"Create a database\" and select PostgreSQL\n3. Copy the `DATABASE_URL` from the env section\n4. Add it to your `server/.env` file\n\n### Option 2: External PostgreSQL\n\nFree PostgreSQL providers:\n- [Neon](https://neon.tech/) - Serverless Postgres with generous free tier\n- [Supabase](https://supabase.com/) - Postgres with additional features\n- [ElephantSQL](https://www.elephantsql.com/) - Classic managed Postgres\n\nSteps:\n1. Create a database instance\n2. Get the connection string (DATABASE_URL)\n3. Add it to `server/.env`\n\n### Initialize Database Schema\n\nAfter setting up your database, create the tables:\n\n```bash\n# If using Replit PostgreSQL\npsql $DATABASE_URL < schema.sql\n\n# Or connect manually and run schema.sql contents\n```\n\nThe schema creates tables for:\n- `users` - User accounts with authentication\n- `favorites` - Saved places (hospitals, hotels, etc.)\n- `journeys` - Saved travel routes and itineraries\n\n## Installation & Setup\n\n### 1. Environment Configuration\n\nCreate `server/.env` file (see `server/.env.example`):\n\n```env\nDATABASE_URL=postgresql://user:password@host:5432/database_name\nSESSION_SECRET=your-strong-random-secret-key-here\n```\n\n**Important**: \n- Use a strong random string for `SESSION_SECRET` in production\n- Never commit `.env` to version control\n\n### 2. Install Dependencies\n\nInstall server dependencies:\n```bash\ncd server\nnpm install\n```\n\nInstall client dependencies:\n```bash\ncd client\nnpm install\n```\n\nRequired packages are defined in `package.json` files and will be auto-installed by Replit.\n\n## Running the Application\n\n### Development Mode\n\n**Terminal 1 - Start Backend Server:**\n```bash\ncd server\nnode server.js\n```\nServer runs on `http://0.0.0.0:5000`\n\n**Terminal 2 - Start Frontend:**\n```bash\ncd client\nnpm run dev\n```\nVite dev server runs on `http://localhost:5173`\n\n### Replit Deployment\n\nOn Replit, the application auto-deploys when you:\n1. Click the \"Run\" button (configure in `.replit` if needed)\n2. Use Replit's built-in deployment features\n\n**Port Configuration:**\n- Backend: Port 5000 (forwarded to 80/443 in production)\n- Frontend: Port 5173 (development) or served via backend in production\n\n## API Endpoints\n\n### Authentication\n- `POST /auth/signup` - Create account (name, email, password)\n- `POST /auth/login` - User login (email, password)\n- `GET /auth/me` - Get current session\n- `GET /auth/logout` - End session\n\n### Places (OpenStreetMap)\n- `GET /places?lat=<lat>&lng=<lng>&type=<type>`\n  - Types: `tourist`, `hotel`, `hospital`\n  - Returns nearby places within 2000m radius\n\n### Crime Data (UK Only)\n- `GET /crime?lat=<lat>&lng=<lng>&radius=<meters>`\n  - Returns crime statistics and safety scores\n  - **Limitation**: UK only (England, Wales, Northern Ireland)\n\n### Routes\n- `POST /route`\n  - Body: `{ waypoints: [{lat, lng}, ...], mode: \"car|foot|bike\", pathType: \"shortest|safest\" }`\n  - Returns route geometry, distance, duration, risk score\n  - **Note**: \"safest\" path is approximate (samples points along route)\n\n### User Data\n- `GET /user/favorites` - Get saved favorites\n- `POST /user/favorites` - Add favorite place\n- `DELETE /user/favorites/:id` - Remove favorite\n- `GET /user/journeys` - Get saved journeys\n- `POST /user/journeys` - Save a journey\n\n## External API Rate Limits & Limitations\n\n### 1. Nominatim Geocoding API\n- **Rate Limit**: 1 request per second\n- **Usage Policy**: Must have valid User-Agent header\n- **Recommendation**: Implement caching for repeated queries\n- **Documentation**: https://operations.osmfoundation.org/policies/nominatim/\n\n### 2. Overpass API (OpenStreetMap Data)\n- **Rate Limit**: Fair use policy, typically 2-3 requests per second\n- **Timeout**: Queries must complete within 180 seconds\n- **Heavy Use**: May result in temporary IP blocks\n- **Recommendation**: Cache results, avoid redundant queries\n- **Documentation**: https://wiki.openstreetmap.org/wiki/Overpass_API\n\n### 3. OSRM Routing API\n- **Rate Limit**: Public demo server has generous limits for development\n- **Production**: Consider self-hosting or paid tier for high traffic\n- **Documentation**: http://project-osrm.org/\n\n### 4. data.police.uk Crime Data API\n- **Coverage**: UK ONLY (England, Wales, Northern Ireland)\n- **Update Frequency**: Monthly data releases (1-2 month lag)\n- **Rate Limit**: Reasonable use policy\n- **Historical Data**: Limited to ~3 years\n- **Limitation**: No real-time data, aggregated statistics only\n- **Documentation**: https://data.police.uk/docs/\n\n**Important Notes:**\n- Crime data is UK-specific and won't work for other countries\n- Crime \"safety scores\" are naive calculations for demonstration\n- Production use should implement proper caching and error handling\n\n## Project Structure\n\n```\n├── client/                 # Frontend React application\n│   ├── src/\n│   │   ├── components/    # Reusable UI components\n│   │   │   ├── AuthModal.jsx\n│   │   │   ├── Layout.jsx\n│   │   │   ├── MapView.jsx\n│   │   │   ├── SearchBar.jsx\n│   │   │   ├── HospitalCard.jsx\n│   │   │   └── HotelCard.jsx\n│   │   ├── pages/         # Page components\n│   │   │   ├── Home.jsx\n│   │   │   ├── Hospitals.jsx\n│   │   │   ├── Hotels.jsx\n│   │   │   └── Crime.jsx\n│   │   ├── lib/           # Utilities\n│   │   │   └── geocode.js\n│   │   ├── App.jsx\n│   │   ├── main.jsx\n│   │   └── index.css\n│   └── index.html\n├── server/                # Backend Express application\n│   ├── routes/           # API route handlers\n│   │   ├── places.js\n│   │   ├── crime.js\n│   │   ├── route.js\n│   │   └── user.js\n│   ├── auth.js           # Authentication logic\n│   ├── db.js             # Database connection\n│   ├── server.js         # Express server setup\n│   └── .env.example      # Environment template\n├── schema.sql            # PostgreSQL schema\n└── README.md\n```\n\n## Security & Best Practices\n\n### Authentication\n- Passwords hashed with bcrypt (10 salt rounds)\n- Session-based auth with httpOnly cookies\n- CORS configured for development (localhost:5173)\n\n### Production Checklist\n- [ ] Set `SESSION_SECRET` to strong random value\n- [ ] Enable `secure: true` for session cookies (HTTPS)\n- [ ] Update CORS origin to production domain\n- [ ] Implement rate limiting on API endpoints\n- [ ] Add request logging and monitoring\n- [ ] Use connection pooling for database\n- [ ] Cache external API responses\n- [ ] Add error tracking (e.g., Sentry)\n\n## Development Tips\n\n### CORS Issues\nIf you encounter CORS errors:\n1. Verify frontend URL matches CORS origin in `server/server.js`\n2. Ensure `credentials: true` is set in both axios calls and CORS config\n3. Check that session cookies are being sent (`withCredentials: true`)\n\n### Port Conflicts\n- Backend default: 5000\n- Frontend default: 5173\n- If ports are in use, kill processes or configure different ports\n\n### Database Connection\nIf database connection fails:\n1. Verify `DATABASE_URL` is correct\n2. Check PostgreSQL is running\n3. Ensure schema has been initialized\n4. Test connection: `psql $DATABASE_URL -c \"SELECT 1;\"`\n\n### Replit-Specific Notes\n- Database tab provides managed PostgreSQL\n- Use `0.0.0.0` instead of `localhost` for server binding\n- Port 5000 is forwarded to 80/443 in production deployments\n- Environment variables can be set in Replit Secrets tab\n- Persistent storage is available in Replit's file system\n\n## Troubleshooting\n\n### \"Failed to fetch\" errors\n- Check that backend server is running on port 5000\n- Verify CORS configuration matches frontend URL\n- Ensure `withCredentials: true` in axios calls\n\n### Session not persisting\n- Verify `SESSION_SECRET` is set in `.env`\n- Check cookie settings (sameSite, secure)\n- Ensure axios uses `withCredentials: true`\n\n### Map not displaying\n- Verify Leaflet CSS is imported in HTML\n- Check console for JavaScript errors\n- Ensure MapView component receives valid coordinates\n\n### Crime data not working\n- Verify location is in UK (England/Wales/Northern Ireland)\n- Check data.police.uk API status\n- Review API rate limits\n\n## Future Enhancements\n\nPotential improvements for production:\n- Real-time crime data integration (where available)\n- Advanced route optimization with graph algorithms\n- Multi-country crime data support\n- Mobile app (React Native)\n- Real-time collaboration features\n- Integration with travel booking APIs\n- Weather data integration\n- Emergency contact information by region\n\n## License\n\nMIT\n\n## Contributing\n\nContributions welcome! Please:\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Submit a pull request\n\n## Support\n\nFor issues or questions:\n- Check existing documentation\n- Review API documentation for external services\n- Check Replit community forums\n- Open an issue with detailed error information\n\n---\n\nBuilt with ❤️ for safer travel experiences\n","size_bytes":10179},"client/src/App.jsx":{"content":"\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Layout from './components/Layout';\nimport Home from './pages/Home';\nimport Hospitals from './pages/Hospitals';\nimport Hotels from './pages/Hotels';\nimport Crime from './pages/Crime';\n\nexport default function App() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<Layout />}>\n          <Route index element={<Home />} />\n          <Route path=\"hospitals\" element={<Hospitals />} />\n          <Route path=\"hotels\" element={<Hotels />} />\n          <Route path=\"crime\" element={<Crime />} />\n        </Route>\n      </Routes>\n    </Router>\n  );\n}\n","size_bytes":652},"client/src/components/Layout.jsx":{"content":"\nimport { Outlet, Link } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport AuthModal from './AuthModal';\n\nexport default function Layout() {\n  const [showAuthModal, setShowAuthModal] = useState(false);\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    checkAuth();\n  }, []);\n\n  const checkAuth = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/auth/me', {\n        withCredentials: true\n      });\n      if (response.data.user) {\n        setUser(response.data.user);\n      }\n    } catch (err) {\n      console.error('Auth check failed:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleLogout = async () => {\n    try {\n      await axios.get('http://localhost:5000/auth/logout', {\n        withCredentials: true\n      });\n      setUser(null);\n    } catch (err) {\n      console.error('Logout failed:', err);\n    }\n  };\n\n  const handleAuthSuccess = (userData) => {\n    setUser(userData);\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <nav className=\"bg-white shadow-md\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center gap-8\">\n              <Link to=\"/\" className=\"text-2xl font-bold text-blue-600\">\n                SafeTravel\n              </Link>\n              <div className=\"hidden md:flex gap-6\">\n                <Link to=\"/\" className=\"text-gray-700 hover:text-blue-600 transition-colors\">\n                  Home\n                </Link>\n                <Link to=\"/hospitals\" className=\"text-gray-700 hover:text-blue-600 transition-colors\">\n                  Hospitals\n                </Link>\n                <Link to=\"/hotels\" className=\"text-gray-700 hover:text-blue-600 transition-colors\">\n                  Hotels\n                </Link>\n                <Link to=\"/crime\" className=\"text-gray-700 hover:text-blue-600 transition-colors\">\n                  Crime Data\n                </Link>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              {!isLoading && (\n                user ? (\n                  <>\n                    <span className=\"text-gray-700\">\n                      Welcome, <span className=\"font-semibold\">{user.name}</span>\n                    </span>\n                    <button\n                      onClick={handleLogout}\n                      className=\"px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors\"\n                    >\n                      Logout\n                    </button>\n                  </>\n                ) : (\n                  <button\n                    onClick={() => setShowAuthModal(true)}\n                    className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n                  >\n                    Login\n                  </button>\n                )\n              )}\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      <main className=\"flex-1\">\n        <Outlet />\n      </main>\n\n      <footer className=\"bg-gray-100 mt-12\">\n        <div className=\"container mx-auto px-4 py-6 text-center text-gray-600\">\n          <p>&copy; 2024 SafeTravel. All rights reserved.</p>\n        </div>\n      </footer>\n\n      {showAuthModal && (\n        <AuthModal \n          onClose={() => setShowAuthModal(false)} \n          onAuthSuccess={handleAuthSuccess}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":3604},"client/src/main.jsx":{"content":"\nimport { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App';\nimport './index.css';\n\ncreateRoot(document.getElementById('root')).render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n","size_bytes":230},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 hover-elevate active-elevate-2 overflow-hidden whitespace-nowrap\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground\",\n        success:\n          \"border-transparent bg-success text-success-foreground\",\n        warning:\n          \"border-transparent bg-warning text-warning-foreground\",\n        outline: \"text-foreground border-border\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n);\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants };\n","size_bytes":1315},"client/vite.config.js":{"content":"\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport path from 'path';\n\nexport default defineConfig({\n  plugins: [react({\n    include: '**/*.{jsx,tsx}',\n  })],\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, './src'),\n    },\n  },\n  server: {\n    host: '0.0.0.0',\n    port: 5173,\n    proxy: {\n      '/auth': 'http://localhost:5000',\n      '/places': 'http://localhost:5000',\n      '/crime': 'http://localhost:5000',\n      '/route': 'http://localhost:5000',\n      '/user': 'http://localhost:5000',\n    }\n  }\n});\n","size_bytes":557},"server/routes/places.js":{"content":"\nconst express = require('express');\nconst router = express.Router();\n\n/**\n * Places API using Overpass API (OpenStreetMap data)\n * \n * RATE LIMITS & USAGE:\n * - Overpass API has rate limits and may block heavy usage\n * - Implement caching for production use\n * - Consider running your own Overpass instance for high traffic\n * \n * GET /places?lat=&lng=&type=\n * \n * Query params:\n * - lat: latitude (required)\n * - lng: longitude (required)\n * - type: tourist|hotel|hospital (required)\n */\n\n// Helper function to build Overpass QL query based on type\nfunction buildOverpassQuery(lat, lng, type, radius = 2000) {\n  let filter = '';\n  \n  switch (type) {\n    case 'hospital':\n      // Query for hospitals, clinics, and medical facilities\n      filter = `\n        (\n          node[\"amenity\"=\"hospital\"](around:${radius},${lat},${lng});\n          way[\"amenity\"=\"hospital\"](around:${radius},${lat},${lng});\n          node[\"amenity\"=\"clinic\"](around:${radius},${lat},${lng});\n          way[\"amenity\"=\"clinic\"](around:${radius},${lat},${lng});\n          node[\"amenity\"=\"doctors\"](around:${radius},${lat},${lng});\n          way[\"amenity\"=\"doctors\"](around:${radius},${lat},${lng});\n          node[\"healthcare\"](around:${radius},${lat},${lng});\n          way[\"healthcare\"](around:${radius},${lat},${lng});\n        );\n      `;\n      break;\n      \n    case 'hotel':\n      // Query for hotels, motels, guest houses, and hostels\n      filter = `\n        (\n          node[\"tourism\"=\"hotel\"](around:${radius},${lat},${lng});\n          way[\"tourism\"=\"hotel\"](around:${radius},${lat},${lng});\n          node[\"tourism\"=\"motel\"](around:${radius},${lat},${lng});\n          way[\"tourism\"=\"motel\"](around:${radius},${lat},${lng});\n          node[\"tourism\"=\"guest_house\"](around:${radius},${lat},${lng});\n          way[\"tourism\"=\"guest_house\"](around:${radius},${lat},${lng});\n          node[\"tourism\"=\"hostel\"](around:${radius},${lat},${lng});\n          way[\"tourism\"=\"hostel\"](around:${radius},${lat},${lng});\n        );\n      `;\n      break;\n      \n    case 'tourist':\n      // Query for tourist attractions, museums, viewpoints\n      filter = `\n        (\n          node[\"tourism\"=\"attraction\"](around:${radius},${lat},${lng});\n          way[\"tourism\"=\"attraction\"](around:${radius},${lat},${lng});\n          node[\"tourism\"=\"museum\"](around:${radius},${lat},${lng});\n          way[\"tourism\"=\"museum\"](around:${radius},${lat},${lng});\n          node[\"tourism\"=\"viewpoint\"](around:${radius},${lat},${lng});\n          node[\"tourism\"=\"gallery\"](around:${radius},${lat},${lng});\n          way[\"tourism\"=\"gallery\"](around:${radius},${lat},${lng});\n          node[\"historic\"](around:${radius},${lat},${lng});\n          way[\"historic\"](around:${radius},${lat},${lng});\n        );\n      `;\n      break;\n      \n    default:\n      throw new Error('Invalid type parameter');\n  }\n  \n  return `[out:json][timeout:25];${filter}out center;`;\n}\n\n// Normalize Overpass API response\nfunction normalizeOverpassData(elements) {\n  return elements.map(element => {\n    // Get coordinates (handle both nodes and ways)\n    const lat = element.lat || (element.center && element.center.lat) || null;\n    const lng = element.lon || (element.center && element.center.lon) || null;\n    \n    if (!lat || !lng) {\n      return null; // Skip elements without coordinates\n    }\n    \n    return {\n      id: element.id,\n      name: element.tags?.name || 'Unnamed',\n      lat,\n      lng,\n      tags: element.tags || {},\n      type: element.type, // 'node' or 'way'\n    };\n  }).filter(item => item !== null); // Remove null entries\n}\n\nrouter.get('/', async (req, res) => {\n  try {\n    const { lat, lng, type } = req.query;\n    \n    // Validate required parameters\n    if (!lat || !lng || !type) {\n      return res.status(400).json({ \n        error: 'Missing required parameters: lat, lng, type' \n      });\n    }\n    \n    // Validate lat/lng are numbers\n    const latitude = parseFloat(lat);\n    const longitude = parseFloat(lng);\n    \n    if (isNaN(latitude) || isNaN(longitude)) {\n      return res.status(400).json({ \n        error: 'Invalid lat/lng values' \n      });\n    }\n    \n    // Validate type\n    const validTypes = ['tourist', 'hotel', 'hospital'];\n    if (!validTypes.includes(type)) {\n      return res.status(400).json({ \n        error: `Invalid type. Must be one of: ${validTypes.join(', ')}` \n      });\n    }\n    \n    // Build Overpass query\n    const query = buildOverpassQuery(latitude, longitude, type);\n    \n    // Fetch from Overpass API\n    const overpassUrl = 'https://overpass-api.de/api/interpreter';\n    const response = await fetch(overpassUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: `data=${encodeURIComponent(query)}`,\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Overpass API error: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    // Normalize and return results\n    const places = normalizeOverpassData(data.elements || []);\n    \n    res.json({\n      success: true,\n      count: places.length,\n      query: { lat: latitude, lng: longitude, type },\n      places,\n    });\n    \n  } catch (error) {\n    console.error('Places API error:', error);\n    res.status(500).json({ \n      error: 'Failed to fetch places data',\n      message: error.message \n    });\n  }\n});\n\nmodule.exports = router;\n","size_bytes":5389},"client/src/lib/geocode.js":{"content":"\n/**\n * Geocode a location query using Nominatim API (OpenStreetMap)\n * \n * IMPORTANT: Nominatim Usage Policy\n * - Maximum 1 request per second\n * - Please add appropriate delays between requests\n * - Consider caching results for repeated queries\n * - For heavy usage, consider setting up your own Nominatim instance\n * \n * @param {string} query - Location search query (e.g., \"New York\", \"1600 Amphitheatre Parkway\")\n * @returns {Promise<Object|null>} Object with {lat, lng, display_name} or null if not found\n */\nexport async function geocode(query) {\n  if (!query || query.trim().length === 0) {\n    console.warn('Geocode: Empty query provided');\n    return null;\n  }\n\n  try {\n    const params = new URLSearchParams({\n      q: query.trim(),\n      format: 'json',\n      limit: '1',\n      addressdetails: '1',\n    });\n\n    const response = await fetch(\n      `https://nominatim.openstreetmap.org/search?${params}`,\n      {\n        headers: {\n          'User-Agent': 'SafeTravel-App/1.0', // Required by Nominatim\n        },\n      }\n    );\n\n    if (!response.ok) {\n      throw new Error(`Nominatim API error: ${response.status}`);\n    }\n\n    const data = await response.json();\n\n    if (!data || data.length === 0) {\n      console.warn('Geocode: No results found for query:', query);\n      return null;\n    }\n\n    const result = data[0];\n    \n    return {\n      lat: parseFloat(result.lat),\n      lng: parseFloat(result.lon),\n      display_name: result.display_name,\n      address: result.address,\n      bbox: result.boundingbox,\n    };\n  } catch (error) {\n    console.error('Geocode error:', error);\n    return null;\n  }\n}\n\n/**\n * Reverse geocode coordinates to get address information\n * \n * @param {number} lat - Latitude\n * @param {number} lng - Longitude\n * @returns {Promise<Object|null>} Address information or null\n */\nexport async function reverseGeocode(lat, lng) {\n  if (!lat || !lng) {\n    console.warn('Reverse geocode: Invalid coordinates');\n    return null;\n  }\n\n  try {\n    const params = new URLSearchParams({\n      lat: lat.toString(),\n      lon: lng.toString(),\n      format: 'json',\n      addressdetails: '1',\n    });\n\n    const response = await fetch(\n      `https://nominatim.openstreetmap.org/reverse?${params}`,\n      {\n        headers: {\n          'User-Agent': 'SafeTravel-App/1.0',\n        },\n      }\n    );\n\n    if (!response.ok) {\n      throw new Error(`Nominatim API error: ${response.status}`);\n    }\n\n    const data = await response.json();\n\n    if (!data || data.error) {\n      console.warn('Reverse geocode: No results found');\n      return null;\n    }\n\n    return {\n      display_name: data.display_name,\n      address: data.address,\n    };\n  } catch (error) {\n    console.error('Reverse geocode error:', error);\n    return null;\n  }\n}\n","size_bytes":2771},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n}\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\nconst toastTimeouts = new Map()\n\nconst addToRemoveQueue = (toastId) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners = []\n\nlet memoryState = { toasts: [] }\n\nfunction dispatch(action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\nfunction toast({ ...props }) {\n  const id = genId()\n\n  const update = (props) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }","size_bytes":2913},"server/auth.js":{"content":"\nconst express = require('express');\nconst bcrypt = require('bcrypt');\nconst pool = require('./db');\n\nconst router = express.Router();\n\n// POST /auth/signup\nrouter.post('/signup', async (req, res) => {\n  try {\n    const { name, email, password } = req.body;\n\n    if (!name || !email || !password) {\n      return res.status(400).json({ message: 'All fields are required' });\n    }\n\n    // Check if user already exists\n    const existingUser = await pool.query(\n      'SELECT * FROM users WHERE email = $1',\n      [email]\n    );\n\n    if (existingUser.rows.length > 0) {\n      return res.status(409).json({ message: 'User already exists' });\n    }\n\n    // Hash password\n    const saltRounds = 10;\n    const hashedPassword = await bcrypt.hash(password, saltRounds);\n\n    // Insert user\n    const result = await pool.query(\n      'INSERT INTO users (name, email, password) VALUES ($1, $2, $3) RETURNING id, name, email, created_at',\n      [name, email, hashedPassword]\n    );\n\n    const user = result.rows[0];\n    req.session.userId = user.id;\n\n    res.status(201).json({\n      message: 'User created successfully',\n      user: {\n        id: user.id,\n        name: user.name,\n        email: user.email,\n        created_at: user.created_at\n      }\n    });\n  } catch (error) {\n    console.error('Signup error:', error);\n    res.status(500).json({ message: 'Server error during signup' });\n  }\n});\n\n// POST /auth/login\nrouter.post('/login', async (req, res) => {\n  try {\n    const { email, password } = req.body;\n\n    if (!email || !password) {\n      return res.status(400).json({ message: 'Email and password are required' });\n    }\n\n    // Find user\n    const result = await pool.query(\n      'SELECT * FROM users WHERE email = $1',\n      [email]\n    );\n\n    if (result.rows.length === 0) {\n      return res.status(401).json({ message: 'Invalid credentials' });\n    }\n\n    const user = result.rows[0];\n\n    // Verify password\n    const isValidPassword = await bcrypt.compare(password, user.password);\n\n    if (!isValidPassword) {\n      return res.status(401).json({ message: 'Invalid credentials' });\n    }\n\n    // Set session\n    req.session.userId = user.id;\n\n    res.json({\n      message: 'Login successful',\n      user: {\n        id: user.id,\n        name: user.name,\n        email: user.email,\n        created_at: user.created_at\n      }\n    });\n  } catch (error) {\n    console.error('Login error:', error);\n    res.status(500).json({ message: 'Server error during login' });\n  }\n});\n\n// GET /auth/me\nrouter.get('/me', async (req, res) => {\n  try {\n    if (!req.session.userId) {\n      return res.json({ user: null });\n    }\n\n    const result = await pool.query(\n      'SELECT id, name, email, created_at FROM users WHERE id = $1',\n      [req.session.userId]\n    );\n\n    if (result.rows.length === 0) {\n      req.session.userId = null;\n      return res.json({ user: null });\n    }\n\n    res.json({ user: result.rows[0] });\n  } catch (error) {\n    console.error('Get me error:', error);\n    res.status(500).json({ message: 'Server error' });\n  }\n});\n\n// GET /auth/logout\nrouter.get('/logout', (req, res) => {\n  req.session.destroy((err) => {\n    if (err) {\n      return res.status(500).json({ message: 'Could not log out' });\n    }\n    res.clearCookie('connect.sid');\n    res.json({ message: 'Logged out successfully' });\n  });\n});\n\nmodule.exports = router;\n","size_bytes":3355},"client/src/pages/Hospitals.jsx":{"content":"\nimport { useState } from 'react';\nimport SearchBar from '../components/SearchBar';\nimport HospitalCard from '../components/HospitalCard';\nimport { geocode } from '../lib/geocode';\n\n// 20 hospital types for filtering\nconst HOSPITAL_TYPES = [\n  { value: 'hospital', label: 'Hospital' },\n  { value: 'clinic', label: 'Clinic' },\n  { value: 'doctors', label: 'Doctor\\'s Office' },\n  { value: 'dentist', label: 'Dentist' },\n  { value: 'pharmacy', label: 'Pharmacy' },\n  { value: 'laboratory', label: 'Laboratory' },\n  { value: 'physiotherapist', label: 'Physiotherapist' },\n  { value: 'alternative', label: 'Alternative Medicine' },\n  { value: 'audiologist', label: 'Audiologist' },\n  { value: 'blood_bank', label: 'Blood Bank' },\n  { value: 'vaccination_centre', label: 'Vaccination Centre' },\n  { value: 'midwife', label: 'Midwife' },\n  { value: 'nurse', label: 'Nurse' },\n  { value: 'occupational_therapist', label: 'Occupational Therapist' },\n  { value: 'optometrist', label: 'Optometrist' },\n  { value: 'podiatrist', label: 'Podiatrist' },\n  { value: 'psychotherapist', label: 'Psychotherapist' },\n  { value: 'rehabilitation', label: 'Rehabilitation' },\n  { value: 'speech_therapist', label: 'Speech Therapist' },\n  { value: 'dialysis', label: 'Dialysis Center' },\n];\n\nexport default function Hospitals() {\n  const [hospitals, setHospitals] = useState([]);\n  const [userLocation, setUserLocation] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [selectedFilters, setSelectedFilters] = useState([]);\n  const [showFilters, setShowFilters] = useState(false);\n\n  const handleSearch = async (query) => {\n    setIsLoading(true);\n    setError(null);\n    setHospitals([]);\n\n    try {\n      // First, geocode the location\n      const location = await geocode(query);\n      \n      if (!location) {\n        setError('Location not found. Please try a different search.');\n        setIsLoading(false);\n        return;\n      }\n\n      setUserLocation(location);\n\n      // Fetch hospitals from our backend API\n      const response = await fetch(\n        `/places?lat=${location.lat}&lng=${location.lng}&type=hospital`\n      );\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch hospitals');\n      }\n\n      const data = await response.json();\n      \n      if (data.success) {\n        setHospitals(data.places || []);\n      } else {\n        throw new Error(data.error || 'Unknown error');\n      }\n    } catch (err) {\n      console.error('Search error:', err);\n      setError('An error occurred while searching for hospitals. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const toggleFilter = (filterValue) => {\n    setSelectedFilters(prev => {\n      if (prev.includes(filterValue)) {\n        return prev.filter(f => f !== filterValue);\n      } else {\n        return [...prev, filterValue];\n      }\n    });\n  };\n\n  const clearFilters = () => {\n    setSelectedFilters([]);\n  };\n\n  // Filter hospitals based on selected types\n  const filteredHospitals = selectedFilters.length > 0\n    ? hospitals.filter(hospital => {\n        const hospitalTypes = [\n          hospital.tags.amenity,\n          hospital.tags.healthcare,\n        ].filter(Boolean);\n        \n        return selectedFilters.some(filter => \n          hospitalTypes.includes(filter)\n        );\n      })\n    : hospitals;\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <h1 className=\"text-4xl font-bold mb-6\">Find Hospitals</h1>\n      <p className=\"text-lg text-gray-600 mb-6\">\n        Search for hospitals and medical facilities in your destination\n      </p>\n      \n      {/* Search Bar */}\n      <SearchBar \n        onSearch={handleSearch} \n        placeholder=\"Search for hospitals by location (e.g., 'New York', 'Tokyo')...\" \n      />\n\n      {/* Loading State */}\n      {isLoading && (\n        <div className=\"mt-8 text-center\">\n          <div className=\"inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n          <p className=\"mt-4 text-gray-600\">Searching for hospitals...</p>\n        </div>\n      )}\n\n      {/* Error State */}\n      {error && (\n        <div className=\"mt-8 p-4 bg-red-50 border border-red-200 rounded-lg\">\n          <p className=\"text-red-800\">{error}</p>\n        </div>\n      )}\n\n      {/* Results */}\n      {!isLoading && hospitals.length > 0 && (\n        <div className=\"mt-8\">\n          {/* Filter Section */}\n          <div className=\"mb-6\">\n            <button\n              onClick={() => setShowFilters(!showFilters)}\n              className=\"flex items-center gap-2 px-4 py-2 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors\"\n            >\n              <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z\" />\n              </svg>\n              Filter by Type ({selectedFilters.length})\n            </button>\n\n            {showFilters && (\n              <div className=\"mt-4 p-4 bg-gray-50 rounded-lg border border-gray-200\">\n                <div className=\"flex justify-between items-center mb-3\">\n                  <h3 className=\"font-semibold\">Filter by Hospital Type</h3>\n                  {selectedFilters.length > 0 && (\n                    <button\n                      onClick={clearFilters}\n                      className=\"text-sm text-blue-600 hover:text-blue-700\"\n                    >\n                      Clear all\n                    </button>\n                  )}\n                </div>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-5 gap-2\">\n                  {HOSPITAL_TYPES.map(type => (\n                    <label\n                      key={type.value}\n                      className=\"flex items-center gap-2 p-2 rounded hover:bg-gray-100 cursor-pointer\"\n                    >\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedFilters.includes(type.value)}\n                        onChange={() => toggleFilter(type.value)}\n                        className=\"rounded text-blue-600\"\n                      />\n                      <span className=\"text-sm\">{type.label}</span>\n                    </label>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Results Header */}\n          <div className=\"mb-4\">\n            <p className=\"text-gray-700\">\n              Found <span className=\"font-semibold\">{filteredHospitals.length}</span> hospital\n              {filteredHospitals.length !== 1 ? 's' : ''} near{' '}\n              <span className=\"font-semibold\">{userLocation?.display_name}</span>\n            </p>\n          </div>\n\n          {/* Hospital Cards Grid */}\n          {filteredHospitals.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredHospitals.map(hospital => (\n                <HospitalCard\n                  key={hospital.id}\n                  hospital={hospital}\n                  userLat={userLocation?.lat}\n                  userLng={userLocation?.lng}\n                />\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12 bg-gray-50 rounded-lg\">\n              <p className=\"text-gray-600\">No hospitals match your selected filters.</p>\n              <button\n                onClick={clearFilters}\n                className=\"mt-4 text-blue-600 hover:text-blue-700\"\n              >\n                Clear filters\n              </button>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Empty State */}\n      {!isLoading && !error && hospitals.length === 0 && (\n        <div className=\"mt-8 text-center py-12 bg-gray-50 rounded-lg\">\n          <svg \n            className=\"w-16 h-16 mx-auto text-gray-400 mb-4\" \n            fill=\"none\" \n            stroke=\"currentColor\" \n            viewBox=\"0 0 24 24\"\n          >\n            <path \n              strokeLinecap=\"round\" \n              strokeLinejoin=\"round\" \n              strokeWidth={2} \n              d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" \n            />\n          </svg>\n          <p className=\"text-gray-600\">Search for a location to find nearby hospitals</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":8518},"client/src/components/Footer.tsx":{"content":"import { Separator } from \"@/components/ui/separator\";\nimport { MapPin } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport function Footer() {\n  return (\n    <footer className=\"bg-muted/30 py-12 px-4\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8 mb-8\">\n          <div className=\"col-span-1\">\n            <div className=\"flex items-center gap-2 mb-4\">\n              <MapPin className=\"h-6 w-6 text-primary\" />\n              <span className=\"font-bold text-xl\">SafeTravel</span>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              Travel with confidence using real-time safety data and intelligent planning tools.\n            </p>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold mb-4\">Product</h3>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li>\n                <Link href=\"/map\">\n                  <a className=\"hover:text-foreground transition-colors\">Safety Maps</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/trips\">\n                  <a className=\"hover:text-foreground transition-colors\">Trip Planning</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/features\">\n                  <a className=\"hover:text-foreground transition-colors\">Features</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/pricing\">\n                  <a className=\"hover:text-foreground transition-colors\">Pricing</a>\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold mb-4\">Company</h3>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li>\n                <Link href=\"/about\">\n                  <a className=\"hover:text-foreground transition-colors\">About Us</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/blog\">\n                  <a className=\"hover:text-foreground transition-colors\">Blog</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/contact\">\n                  <a className=\"hover:text-foreground transition-colors\">Contact</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/careers\">\n                  <a className=\"hover:text-foreground transition-colors\">Careers</a>\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold mb-4\">Legal</h3>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li>\n                <Link href=\"/privacy\">\n                  <a className=\"hover:text-foreground transition-colors\">Privacy Policy</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/terms\">\n                  <a className=\"hover:text-foreground transition-colors\">Terms of Service</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/cookies\">\n                  <a className=\"hover:text-foreground transition-colors\">Cookie Policy</a>\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <Separator className=\"my-8\" />\n\n        <div className=\"flex flex-col md:flex-row items-center justify-between gap-4 text-sm text-muted-foreground\">\n          <p>© 2025 SafeTravel. All rights reserved.</p>\n          <p>Built with care for safer travels worldwide.</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":3714},"client/src/components/HospitalCard.jsx":{"content":"\n/**\n * Calculate Haversine distance between two coordinates\n * Returns distance in kilometers\n */\nfunction haversineDistance(lat1, lon1, lat2, lon2) {\n  const R = 6371; // Earth's radius in kilometers\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLon = (lon2 - lon1) * Math.PI / 180;\n  const a = \n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n    Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n}\n\nexport default function HospitalCard({ hospital, userLat, userLng }) {\n  const distance = userLat && userLng \n    ? haversineDistance(userLat, userLng, hospital.lat, hospital.lng)\n    : null;\n\n  // Extract hospital type from tags\n  const getHospitalType = (tags) => {\n    const types = [];\n    if (tags.amenity) types.push(tags.amenity);\n    if (tags.healthcare) types.push(tags.healthcare);\n    if (tags.emergency) types.push('emergency');\n    return types.length > 0 ? types : ['medical facility'];\n  };\n\n  const types = getHospitalType(hospital.tags);\n\n  // Generate OSRM directions link\n  const getDirectionsUrl = () => {\n    if (!userLat || !userLng) return null;\n    return `https://router.project-osrm.org/?z=13&loc=${userLat},${userLng}&loc=${hospital.lat},${hospital.lng}`;\n  };\n\n  const directionsUrl = getDirectionsUrl();\n\n  return (\n    <div className=\"bg-white border border-gray-200 rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow\">\n      {/* Placeholder Image */}\n      <div className=\"w-full h-48 bg-gradient-to-br from-blue-100 to-blue-200 flex items-center justify-center\">\n        <svg \n          className=\"w-16 h-16 text-blue-600\" \n          fill=\"none\" \n          stroke=\"currentColor\" \n          viewBox=\"0 0 24 24\"\n        >\n          <path \n            strokeLinecap=\"round\" \n            strokeLinejoin=\"round\" \n            strokeWidth={2} \n            d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\" \n          />\n        </svg>\n      </div>\n\n      {/* Content */}\n      <div className=\"p-4\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n          {hospital.name}\n        </h3>\n\n        {/* Type Badges */}\n        <div className=\"flex flex-wrap gap-2 mb-3\">\n          {types.map((type, index) => (\n            <span \n              key={index}\n              className=\"px-2 py-1 bg-blue-100 text-blue-800 text-xs font-medium rounded-full\"\n            >\n              {type.replace('_', ' ')}\n            </span>\n          ))}\n        </div>\n\n        {/* Distance */}\n        {distance !== null && (\n          <p className=\"text-sm text-gray-600 mb-3\">\n            <span className=\"font-medium\">Distance:</span>{' '}\n            {distance < 1 \n              ? `${(distance * 1000).toFixed(0)}m` \n              : `${distance.toFixed(2)}km`}\n          </p>\n        )}\n\n        {/* Additional Info */}\n        {hospital.tags.phone && (\n          <p className=\"text-sm text-gray-600 mb-2\">\n            <span className=\"font-medium\">Phone:</span> {hospital.tags.phone}\n          </p>\n        )}\n\n        {hospital.tags.opening_hours && (\n          <p className=\"text-sm text-gray-600 mb-3\">\n            <span className=\"font-medium\">Hours:</span> {hospital.tags.opening_hours}\n          </p>\n        )}\n\n        {/* Directions Link */}\n        {directionsUrl && (\n          <a\n            href={directionsUrl}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"inline-flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm\"\n          >\n            <svg \n              className=\"w-4 h-4\" \n              fill=\"none\" \n              stroke=\"currentColor\" \n              viewBox=\"0 0 24 24\"\n            >\n              <path \n                strokeLinecap=\"round\" \n                strokeLinejoin=\"round\" \n                strokeWidth={2} \n                d=\"M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7\" \n              />\n            </svg>\n            Get Directions\n          </a>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":4336},"server/server.js":{"content":"\nconst express = require('express');\nconst cors = require('cors');\nconst session = require('express-session');\nrequire('dotenv').config();\n\nconst authRouter = require('./auth');\nconst placesRouter = require('./routes/places');\nconst crimeRouter = require('./routes/crime');\nconst routeRouter = require('./routes/route');\nconst userRouter = require('./routes/user');\n\nconst app = express();\n\n// Middleware\napp.use(express.json());\napp.use(cors({\n  origin: 'http://localhost:5173',\n  credentials: true\n}));\n\napp.use(session({\n  secret: process.env.SESSION_SECRET || 'your-secret-key-change-in-production',\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: false, // set to true in production with HTTPS\n    httpOnly: true,\n    maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    sameSite: 'lax'\n  }\n}));\n\n// Routes\napp.use('/auth', authRouter);\napp.use('/places', placesRouter);\napp.use('/crime', crimeRouter);\napp.use('/route', routeRouter);\napp.use('/user', userRouter);\n\n// Health check\napp.get('/health', (req, res) => {\n  res.json({ status: 'ok' });\n});\n\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, '0.0.0.0', () => {\n  console.log(`Server running on http://0.0.0.0:${PORT}`);\n});\n","size_bytes":1208},"client/src/components/TripPlanningCard.tsx":{"content":"import { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, MapPin, Trash2, Edit } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface TripPlanningCardProps {\n  id: string;\n  title: string;\n  destinations: string[];\n  startDate?: string;\n  endDate?: string;\n  safetyRating: number;\n}\n\nexport function TripPlanningCard({ \n  id, \n  title, \n  destinations, \n  startDate, \n  endDate, \n  safetyRating \n}: TripPlanningCardProps) {\n  const [isDeleting, setIsDeleting] = useState(false);\n\n  const handleDelete = () => {\n    setIsDeleting(true);\n    console.log(\"Deleting trip:\", id);\n    setTimeout(() => setIsDeleting(false), 1000);\n  };\n\n  const handleEdit = () => {\n    console.log(\"Editing trip:\", id);\n  };\n\n  const getSafetyBadge = (rating: number) => {\n    if (rating >= 80) return { variant: \"success\" as const, label: \"Safe\" };\n    if (rating >= 50) return { variant: \"warning\" as const, label: \"Moderate\" };\n    return { variant: \"destructive\" as const, label: \"Caution\" };\n  };\n\n  const safety = getSafetyBadge(safetyRating);\n\n  return (\n    <Card className=\"hover-elevate\" data-testid={`card-trip-${id}`}>\n      <CardHeader>\n        <div className=\"flex items-start justify-between gap-2\">\n          <CardTitle className=\"text-xl\" data-testid=\"text-trip-title\">{title}</CardTitle>\n          <Badge variant={safety.variant} data-testid=\"badge-trip-safety\">\n            {safety.label} {safetyRating}%\n          </Badge>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center text-sm text-muted-foreground\">\n            <MapPin className=\"h-4 w-4 mr-2\" />\n            <span data-testid=\"text-destinations-count\">{destinations.length} destinations</span>\n          </div>\n          <div className=\"flex flex-wrap gap-2\">\n            {destinations.slice(0, 3).map((dest, idx) => (\n              <Badge key={idx} variant=\"outline\" data-testid={`badge-destination-${idx}`}>\n                {dest}\n              </Badge>\n            ))}\n            {destinations.length > 3 && (\n              <Badge variant=\"outline\">+{destinations.length - 3} more</Badge>\n            )}\n          </div>\n        </div>\n        {(startDate || endDate) && (\n          <div className=\"flex items-center text-sm text-muted-foreground\">\n            <Calendar className=\"h-4 w-4 mr-2\" />\n            <span data-testid=\"text-trip-dates\">\n              {startDate && endDate ? `${startDate} - ${endDate}` : startDate || endDate}\n            </span>\n          </div>\n        )}\n      </CardContent>\n      <CardFooter className=\"flex gap-2\">\n        <Button \n          variant=\"outline\" \n          size=\"sm\" \n          className=\"flex-1\"\n          onClick={handleEdit}\n          data-testid=\"button-edit-trip\"\n        >\n          <Edit className=\"h-4 w-4 mr-1\" />\n          Edit\n        </Button>\n        <Button \n          variant=\"destructive\" \n          size=\"sm\"\n          onClick={handleDelete}\n          disabled={isDeleting}\n          data-testid=\"button-delete-trip\"\n        >\n          <Trash2 className=\"h-4 w-4 mr-1\" />\n          {isDeleting ? \"Deleting...\" : \"Delete\"}\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n","size_bytes":3374},"server/routes/crime.js":{"content":"const express = require('express');\nconst router = express.Router();\n\n// GET /crime?lat=&lng=&radius=\n// Returns crime statistics from UK Police API\n// NOTE: This API only covers England, Wales, and Northern Ireland\nrouter.get('/', async (req, res) => {\n  try {\n    const { lat, lng, radius = 2000 } = req.query;\n\n    if (!lat || !lng) {\n      return res.status(400).json({\n        success: false,\n        error: 'Latitude and longitude are required'\n      });\n    }\n\n    const latitude = parseFloat(lat);\n    const longitude = parseFloat(lng);\n\n    if (isNaN(latitude) || isNaN(longitude)) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid latitude or longitude'\n      });\n    }\n\n    // UK Police API endpoint for street-level crimes\n    // Note: This API has rate limits (15 requests per second, 1000 per hour per IP)\n    const baseUrl = process.env.API_URL || 'http://localhost:5000';\n    const apiUrl = `${baseUrl}/crime?lat=${latitude}&lng=${longitude}`;\n\n    const response = await fetch(apiUrl);\n\n    if (!response.ok) {\n      // If outside UK coverage or API error\n      if (response.status === 404) {\n        return res.json({\n          success: true,\n          coverage: 'uk_only',\n          message: 'Crime data is only available for England, Wales, and Northern Ireland',\n          total: 0,\n          byCategory: {},\n          crimeScore: 0,\n          lastUpdated: null\n        });\n      }\n      throw new Error(`Police API error: ${response.status}`);\n    }\n\n    const crimes = await response.json();\n\n    // Aggregate by category\n    const byCategory = {};\n    crimes.forEach(crime => {\n      const category = crime.category || 'unknown';\n      byCategory[category] = (byCategory[category] || 0) + 1;\n    });\n\n    // Calculate naive crime score (0-100, where 100 is highest risk)\n    // This is a simplified calculation based on crime count\n    // In production, this would use more sophisticated risk models\n    const total = crimes.length;\n    const crimeScore = Math.min(100, Math.round((total / 50) * 100));\n\n    // Get the latest crime date\n    const lastUpdated = crimes.length > 0\n      ? crimes.reduce((latest, crime) => {\n          const crimeDate = new Date(crime.month);\n          return crimeDate > latest ? crimeDate : latest;\n        }, new Date(0))\n      : null;\n\n    res.json({\n      success: true,\n      coverage: 'uk_only',\n      message: 'Data covers England, Wales, and Northern Ireland only. Shows crimes from most recent month available.',\n      total,\n      byCategory,\n      crimeScore,\n      lastUpdated: lastUpdated ? lastUpdated.toISOString() : null,\n      limitations: [\n        'UK coverage only (England, Wales, Northern Ireland)',\n        'Data shows single month snapshot (most recent available)',\n        'Crime score is simplified calculation',\n        'API rate limited: 15 req/sec, 1000 req/hour',\n        'Full risk analysis would require historical data aggregation'\n      ]\n    });\n\n  } catch (error) {\n    console.error('Error fetching crime data:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch crime data',\n      message: error.message\n    });\n  }\n});\n\nmodule.exports = router;","size_bytes":3211},"server/db.js":{"content":"\nconst { Pool } = require('pg');\nrequire('dotenv').config();\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL || 'postgresql://user:password@localhost:5432/safe_tourism',\n  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false\n});\n\n// Test connection\npool.on('connect', () => {\n  console.log('Connected to PostgreSQL database');\n});\n\npool.on('error', (err) => {\n  console.error('Unexpected error on idle client', err);\n  process.exit(-1);\n});\n\nmodule.exports = pool;\n","size_bytes":517},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-lg border border-input bg-background px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nInput.displayName = \"Input\";\n\nexport { Input };\n","size_bytes":773},"client/src/components/SafetyMapPreview.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Map, Layers, Navigation } from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport function SafetyMapPreview() {\n  const [activeLayer, setActiveLayer] = useState<\"crime\" | \"routes\" | \"safety\">(\"crime\");\n\n  const layers = [\n    { id: \"crime\" as const, label: \"Crime Data\", icon: Map },\n    { id: \"routes\" as const, label: \"Safe Routes\", icon: Navigation },\n    { id: \"safety\" as const, label: \"Safety Zones\", icon: Layers },\n  ];\n\n  return (\n    <section className=\"py-20 px-4\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-4xl font-bold mb-4\" data-testid=\"heading-map-preview\">\n            Interactive Safety Maps\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n            Explore detailed crime statistics and safety information with our interactive map interface\n          </p>\n        </div>\n\n        <Card className=\"overflow-hidden\">\n          <CardHeader className=\"border-b\">\n            <div className=\"flex flex-col md:flex-row items-start md:items-center justify-between gap-4\">\n              <div>\n                <CardTitle className=\"text-2xl mb-2\">London Safety Overview</CardTitle>\n                <CardDescription>Last updated: 2 hours ago</CardDescription>\n              </div>\n              <div className=\"flex gap-2\">\n                {layers.map((layer) => {\n                  const Icon = layer.icon;\n                  return (\n                    <Button\n                      key={layer.id}\n                      variant={activeLayer === layer.id ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => setActiveLayer(layer.id)}\n                      data-testid={`button-layer-${layer.id}`}\n                    >\n                      <Icon className=\"h-4 w-4 mr-1\" />\n                      {layer.label}\n                    </Button>\n                  );\n                })}\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            <div className=\"relative aspect-video bg-muted/30 flex items-center justify-center\">\n              <div className=\"absolute inset-0 bg-gradient-to-br from-primary/5 to-secondary/5\" />\n              \n              <div className=\"relative z-10 text-center p-8\">\n                <div className=\"inline-flex items-center justify-center w-20 h-20 rounded-full bg-primary/10 mb-4\">\n                  <Map className=\"h-10 w-10 text-primary\" />\n                </div>\n                <h3 className=\"text-2xl font-semibold mb-2\">\n                  {activeLayer === \"crime\" && \"Crime Heat Map\"}\n                  {activeLayer === \"routes\" && \"Safe Route Planning\"}\n                  {activeLayer === \"safety\" && \"Safety Zone Analysis\"}\n                </h3>\n                <p className=\"text-muted-foreground mb-6 max-w-md\">\n                  {activeLayer === \"crime\" && \"View color-coded crime statistics across different neighborhoods and districts\"}\n                  {activeLayer === \"routes\" && \"Plan your journey with routes optimized for safety and efficiency\"}\n                  {activeLayer === \"safety\" && \"Identify safe areas and high-risk zones at a glance\"}\n                </p>\n                <div className=\"flex flex-wrap items-center justify-center gap-2\">\n                  <Badge variant=\"success\">Low Risk Areas</Badge>\n                  <Badge variant=\"warning\">Moderate Risk</Badge>\n                  <Badge variant=\"destructive\">High Alert Zones</Badge>\n                </div>\n              </div>\n\n              <div className=\"absolute top-4 left-4 flex flex-col gap-2\">\n                <Card className=\"p-3 shadow-lg\">\n                  <div className=\"text-xs text-muted-foreground mb-1\">Overall Safety</div>\n                  <div className=\"text-2xl font-bold text-success\">8.2/10</div>\n                </Card>\n              </div>\n\n              <div className=\"absolute bottom-4 right-4\">\n                <Button data-testid=\"button-explore-map\">\n                  Explore Full Map\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4425},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\",\n        md: \".375rem\",\n        sm: \".1875rem\",\n      },\n      colors: {\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        success: {\n          DEFAULT: \"hsl(var(--chart-2) / <alpha-value>)\",\n          foreground: \"hsl(0 0% 100% / <alpha-value>)\",\n        },\n        warning: {\n          DEFAULT: \"hsl(42 93% 56% / <alpha-value>)\",\n          foreground: \"hsl(0 0% 8% / <alpha-value>)\",\n        }\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4073},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\";\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n);\nSeparator.displayName = SeparatorPrimitive.Root.displayName;\n\nexport { Separator };\n","size_bytes":762},"client/src/pages/Crime.jsx":{"content":"\nimport { useState } from 'react';\nimport SearchBar from '../components/SearchBar';\nimport MapView from '../components/MapView';\nimport { geocode } from '../lib/geocode';\n\nexport default function Crime() {\n  const [crimeData, setCrimeData] = useState(null);\n  const [mapCenter, setMapCenter] = useState([51.505, -0.09]);\n  const [mapZoom, setMapZoom] = useState(13);\n  const [markers, setMarkers] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const handleSearch = async (query) => {\n    setIsLoading(true);\n    setError(null);\n    setCrimeData(null);\n\n    try {\n      const location = await geocode(query);\n      \n      if (!location) {\n        setError('Location not found. Please try a different search.');\n        setIsLoading(false);\n        return;\n      }\n\n      setMapCenter([location.lat, location.lng]);\n      setMapZoom(14);\n\n      // Fetch crime data\n      const response = await fetch(\n        `http://localhost:5000/crime?lat=${location.lat}&lng=${location.lng}`\n      );\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch crime data');\n      }\n\n      const data = await response.json();\n      \n      if (data.success) {\n        setCrimeData(data);\n        \n        // Create heatmap effect with semi-transparent circle marker\n        setMarkers([{\n          lat: location.lat,\n          lng: location.lng,\n          label: `${location.display_name}<br/>Crime Score: ${data.crimeScore}/100<br/>Total Crimes: ${data.total}`\n        }]);\n      } else {\n        throw new Error(data.error || 'Unknown error');\n      }\n    } catch (err) {\n      console.error('Search error:', err);\n      setError('An error occurred while fetching crime data. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getCrimeScoreColor = (score) => {\n    if (score < 30) return 'text-green-600 bg-green-50';\n    if (score < 60) return 'text-yellow-600 bg-yellow-50';\n    return 'text-red-600 bg-red-50';\n  };\n\n  const getCrimeScoreLabel = (score) => {\n    if (score < 30) return 'Low Risk';\n    if (score < 60) return 'Moderate Risk';\n    return 'High Risk';\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <h1 className=\"text-4xl font-bold mb-6\">Crime Statistics</h1>\n      <p className=\"text-lg text-gray-600 mb-6\">\n        View real-time crime data and safety ratings for any location\n      </p>\n      <SearchBar \n        onSearch={handleSearch} \n        placeholder=\"Search for crime data by location...\" \n      />\n\n      {isLoading && (\n        <div className=\"mt-8 text-center\">\n          <div className=\"inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n          <p className=\"mt-4 text-gray-600\">Fetching crime data...</p>\n        </div>\n      )}\n\n      {error && (\n        <div className=\"mt-8 p-4 bg-red-50 border border-red-200 rounded-lg\">\n          <p className=\"text-red-800\">{error}</p>\n        </div>\n      )}\n\n      {crimeData && !isLoading && (\n        <div className=\"mt-8\">\n          {/* Coverage Notice */}\n          {crimeData.coverage === 'uk_only' && (\n            <div className=\"mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n              <h3 className=\"font-semibold text-blue-900 mb-2\">Coverage Information</h3>\n              <p className=\"text-blue-800 text-sm\">{crimeData.message}</p>\n            </div>\n          )}\n\n          {/* Crime Score Card */}\n          <div className={`mb-6 p-6 rounded-lg border-2 ${getCrimeScoreColor(crimeData.crimeScore)}`}>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-2xl font-bold mb-2\">\n                  Crime Score: {crimeData.crimeScore}/100\n                </h2>\n                <p className=\"text-lg font-semibold\">\n                  {getCrimeScoreLabel(crimeData.crimeScore)}\n                </p>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-3xl font-bold\">{crimeData.total}</p>\n                <p className=\"text-sm\">Total Crimes</p>\n              </div>\n            </div>\n            {crimeData.lastUpdated && (\n              <p className=\"mt-3 text-sm\">\n                Last Updated: {new Date(crimeData.lastUpdated).toLocaleDateString()}\n              </p>\n            )}\n          </div>\n\n          {/* Map */}\n          <div className=\"mb-6\">\n            <h3 className=\"text-xl font-semibold mb-3\">Location Map</h3>\n            <MapView \n              center={mapCenter} \n              zoom={mapZoom} \n              markers={markers}\n              height=\"400px\"\n            />\n          </div>\n\n          {/* Crime Categories */}\n          {Object.keys(crimeData.byCategory).length > 0 && (\n            <div className=\"mb-6\">\n              <h3 className=\"text-xl font-semibold mb-3\">Crime by Category</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {Object.entries(crimeData.byCategory)\n                  .sort((a, b) => b[1] - a[1])\n                  .map(([category, count]) => (\n                    <div \n                      key={category}\n                      className=\"p-4 bg-white border border-gray-200 rounded-lg\"\n                    >\n                      <p className=\"text-sm text-gray-600 capitalize\">\n                        {category.replace(/-/g, ' ')}\n                      </p>\n                      <p className=\"text-2xl font-bold text-gray-900\">{count}</p>\n                    </div>\n                  ))}\n              </div>\n            </div>\n          )}\n\n          {/* Limitations */}\n          {crimeData.limitations && (\n            <div className=\"p-4 bg-gray-50 border border-gray-200 rounded-lg\">\n              <h3 className=\"font-semibold text-gray-900 mb-2\">Data Limitations</h3>\n              <ul className=\"list-disc list-inside text-sm text-gray-700 space-y-1\">\n                {crimeData.limitations.map((limitation, index) => (\n                  <li key={index}>{limitation}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n      )}\n\n      {!isLoading && !error && !crimeData && (\n        <div className=\"mt-8 text-center py-12 bg-gray-50 rounded-lg\">\n          <svg \n            className=\"w-16 h-16 mx-auto text-gray-400 mb-4\" \n            fill=\"none\" \n            stroke=\"currentColor\" \n            viewBox=\"0 0 24 24\"\n          >\n            <path \n              strokeLinecap=\"round\" \n              strokeLinejoin=\"round\" \n              strokeWidth={2} \n              d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" \n            />\n          </svg>\n          <p className=\"text-gray-600\">Search for a location to view crime statistics</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":6966},"client/src/components/ui/avatar.tsx":{"content":"import * as React from \"react\";\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n));\nAvatar.displayName = AvatarPrimitive.Root.displayName;\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n));\nAvatarImage.displayName = AvatarPrimitive.Image.displayName;\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n));\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;\n\nexport { Avatar, AvatarImage, AvatarFallback };\n","size_bytes":1415},"client/src/components/HotelCard.jsx":{"content":"\nimport { useState } from 'react';\n\nfunction haversineDistance(lat1, lon1, lat2, lon2) {\n  const R = 6371;\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLon = (lon2 - lon1) * Math.PI / 180;\n  const a = \n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n    Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n}\n\nexport default function HotelCard({ hotel, userLat, userLng }) {\n  const [isFavorite, setIsFavorite] = useState(false);\n  const [isAddingFavorite, setIsAddingFavorite] = useState(false);\n\n  const distance = userLat && userLng \n    ? haversineDistance(userLat, userLng, hotel.lat, hotel.lng)\n    : null;\n\n  const getHotelType = (tags) => {\n    const types = [];\n    if (tags.tourism) types.push(tags.tourism);\n    if (tags.amenity) types.push(tags.amenity);\n    return types.length > 0 ? types : ['accommodation'];\n  };\n\n  const types = getHotelType(hotel.tags);\n\n  const handleAddToFavorites = async () => {\n    setIsAddingFavorite(true);\n    try {\n      const response = await fetch('http://localhost:5000/user/favorites', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          place: {\n            name: hotel.name || 'Unnamed Hotel',\n            latitude: hotel.lat,\n            longitude: hotel.lng,\n            tags: hotel.tags,\n          }\n        }),\n      });\n\n      if (response.status === 401) {\n        alert('Please log in to add favorites');\n        return;\n      }\n\n      if (!response.ok) {\n        throw new Error('Failed to add favorite');\n      }\n\n      setIsFavorite(true);\n      alert('Added to favorites!');\n    } catch (error) {\n      console.error('Error adding favorite:', error);\n      alert('Failed to add favorite. Please try again.');\n    } finally {\n      setIsAddingFavorite(false);\n    }\n  };\n\n  const getDirectionsUrl = () => {\n    if (!userLat || !userLng) return null;\n    return `https://router.project-osrm.org/?z=13&loc=${userLat},${userLng}&loc=${hotel.lat},${hotel.lng}`;\n  };\n\n  const directionsUrl = getDirectionsUrl();\n\n  return (\n    <div className=\"bg-white border border-gray-200 rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow\">\n      <div className=\"w-full h-48 bg-gradient-to-br from-purple-100 to-purple-200 flex items-center justify-center\">\n        <svg \n          className=\"w-16 h-16 text-purple-600\" \n          fill=\"none\" \n          stroke=\"currentColor\" \n          viewBox=\"0 0 24 24\"\n        >\n          <path \n            strokeLinecap=\"round\" \n            strokeLinejoin=\"round\" \n            strokeWidth={2} \n            d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\" \n          />\n        </svg>\n      </div>\n\n      <div className=\"p-4\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n          {hotel.name || 'Unnamed Hotel'}\n        </h3>\n\n        <div className=\"flex flex-wrap gap-2 mb-3\">\n          {types.map((type, index) => (\n            <span \n              key={index}\n              className=\"px-2 py-1 bg-purple-100 text-purple-800 text-xs font-medium rounded-full\"\n            >\n              {type.replace('_', ' ')}\n            </span>\n          ))}\n        </div>\n\n        {distance !== null && (\n          <p className=\"text-sm text-gray-600 mb-3\">\n            <span className=\"font-medium\">Distance:</span>{' '}\n            {distance < 1 \n              ? `${(distance * 1000).toFixed(0)}m` \n              : `${distance.toFixed(2)}km`}\n          </p>\n        )}\n\n        {hotel.tags.stars && (\n          <p className=\"text-sm text-gray-600 mb-2\">\n            <span className=\"font-medium\">Rating:</span> {hotel.tags.stars} stars\n          </p>\n        )}\n\n        {hotel.tags.phone && (\n          <p className=\"text-sm text-gray-600 mb-2\">\n            <span className=\"font-medium\">Phone:</span> {hotel.tags.phone}\n          </p>\n        )}\n\n        {hotel.tags.website && (\n          <p className=\"text-sm text-gray-600 mb-3\">\n            <a \n              href={hotel.tags.website} \n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              className=\"text-blue-600 hover:underline\"\n            >\n              Visit Website\n            </a>\n          </p>\n        )}\n\n        <div className=\"flex gap-2\">\n          {directionsUrl && (\n            <a\n              href={directionsUrl}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"flex-1 inline-flex items-center justify-center gap-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors text-sm\"\n            >\n              <svg \n                className=\"w-4 h-4\" \n                fill=\"none\" \n                stroke=\"currentColor\" \n                viewBox=\"0 0 24 24\"\n              >\n                <path \n                  strokeLinecap=\"round\" \n                  strokeLinejoin=\"round\" \n                  strokeWidth={2} \n                  d=\"M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7\" \n                />\n              </svg>\n              Directions\n            </a>\n          )}\n          \n          <button\n            onClick={handleAddToFavorites}\n            disabled={isFavorite || isAddingFavorite}\n            className={`flex-1 inline-flex items-center justify-center gap-2 px-4 py-2 rounded-lg transition-colors text-sm ${\n              isFavorite \n                ? 'bg-green-100 text-green-800 cursor-not-allowed' \n                : 'bg-gray-100 text-gray-800 hover:bg-gray-200'\n            }`}\n          >\n            <svg \n              className=\"w-4 h-4\" \n              fill={isFavorite ? \"currentColor\" : \"none\"}\n              stroke=\"currentColor\" \n              viewBox=\"0 0 24 24\"\n            >\n              <path \n                strokeLinecap=\"round\" \n                strokeLinejoin=\"round\" \n                strokeWidth={2} \n                d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\" \n              />\n            </svg>\n            {isFavorite ? 'Favorited' : isAddingFavorite ? 'Adding...' : 'Favorite'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6553},"attached_assets/content-1760865728525.md":{"content":"[Skip to main content](https://data.police.uk/#content)\n\n- data.police.uk uses cookies to make the site simpler. [Find out more about cookies](https://www.police.uk/pu/cookies/)\n\n\n# Welcome to data.police.uk\n\nThis is the site for open data about crime and policing in England, Wales and Northern Ireland.\n\n\nYou can download [street-level crime, outcome, and stop and search data](https://data.police.uk/data/) in clear and simple CSV format and explore the [API](https://data.police.uk/docs/) containing detailed crime data and information about individual police forces and neighbourhood teams.\n\n\nYou can also download data on police activity, and a range of data collected under the [police annual data requirement (ADR)](https://data.police.uk/data/statistical-data/) including arrests and 101 call handling.\n\n\nAll the data on this site is made available under the [Open Government Licence v3.0](https://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/).\n\n\n- [**Downloads** \\\\\nDownload Police.uk data in batches](https://data.police.uk/data/)\n- [**API docs** \\\\\nAccess Police.uk data via an API](https://data.police.uk/docs/)\n- [**Changelog** \\\\\nSee what's new, see what's coming soon](https://data.police.uk/changelog/)","size_bytes":1241},"client/src/components/SearchBar.jsx":{"content":"\nimport { useState } from 'react';\n\nexport default function SearchBar({ onSearch, placeholder = 'Search...' }) {\n  const [query, setQuery] = useState('');\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (onSearch && query.trim()) {\n      onSearch(query);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"w-full max-w-2xl\">\n      <div className=\"flex gap-2\">\n        <input\n          type=\"text\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          placeholder={placeholder}\n          className=\"flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        />\n        <button\n          type=\"submit\"\n          className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n        >\n          Search\n        </button>\n      </div>\n    </form>\n  );\n}\n","size_bytes":898},"client/src/components/CTASection.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { ArrowRight } from \"lucide-react\";\n\nexport function CTASection() {\n  const handleGetStarted = () => {\n    console.log(\"Get started clicked\");\n  };\n\n  return (\n    <section className=\"py-20 px-4 bg-primary text-primary-foreground\">\n      <div className=\"max-w-4xl mx-auto text-center\">\n        <h2 className=\"text-4xl md:text-5xl font-bold mb-6\" data-testid=\"heading-cta\">\n          Ready to Travel Safer?\n        </h2>\n        <p className=\"text-xl mb-8 opacity-90 max-w-2xl mx-auto\">\n          Join thousands of travelers who plan their trips with confidence using real-time safety data and intelligent route optimization.\n        </p>\n        <Button \n          size=\"lg\" \n          variant=\"secondary\" \n          className=\"text-lg px-8\"\n          onClick={handleGetStarted}\n          data-testid=\"button-cta-get-started\"\n        >\n          Get Started for Free\n          <ArrowRight className=\"ml-2 h-5 w-5\" />\n        </Button>\n      </div>\n    </section>\n  );\n}\n","size_bytes":1026},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState, useEffect } from \"react\";\n\nexport function ThemeToggle() {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"light\");\n\n  useEffect(() => {\n    const stored = localStorage.getItem(\"theme\") as \"light\" | \"dark\" | null;\n    if (stored) {\n      setTheme(stored);\n      document.documentElement.classList.toggle(\"dark\", stored === \"dark\");\n    }\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    localStorage.setItem(\"theme\", newTheme);\n    document.documentElement.classList.toggle(\"dark\", newTheme === \"dark\");\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5\" />\n      ) : (\n        <Sun className=\"h-5 w-5\" />\n      )}\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n","size_bytes":1040},"attached_assets/content-1760865465779.md":{"content":"```json\n{\"message\":\"URL string malformed close to position 1: \\\"\\/\\\"\",\"code\":\"InvalidUrl\"}\n```","size_bytes":94},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-lg text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 hover-elevate active-elevate-2 border\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border-destructive-border\",\n        outline:\n          \"border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground border-secondary-border\",\n        ghost: \"border-transparent hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline border-transparent\",\n      },\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-lg px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n","size_bytes":1991},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\nimport { cn } from \"../../lib/utils\"\n\nconst Card = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }","size_bytes":1497},"client/src/components/ui/toaster.tsx":{"content":"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"./toast\"\nimport { useToast } from \"../../hooks/use-toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":763},"client/src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\";\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst TooltipProvider = TooltipPrimitive.Provider;\n\nconst Tooltip = TooltipPrimitive.Root;\n\nconst TooltipTrigger = TooltipPrimitive.Trigger;\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n));\nTooltipContent.displayName = TooltipPrimitive.Content.displayName;\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };\n","size_bytes":1137},"client/src/components/SafetyCard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AlertTriangle, CheckCircle, AlertCircle } from \"lucide-react\";\n\ntype SafetyLevel = \"safe\" | \"moderate\" | \"caution\";\n\ninterface SafetyCardProps {\n  location: string;\n  safetyLevel: SafetyLevel;\n  crimeRate: number;\n  description: string;\n  lastUpdated: string;\n}\n\nconst safetyConfig = {\n  safe: {\n    icon: CheckCircle,\n    badge: \"success\",\n    color: \"text-success\",\n    label: \"Safe\",\n  },\n  moderate: {\n    icon: AlertCircle,\n    badge: \"warning\",\n    color: \"text-warning\",\n    label: \"Moderate Risk\",\n  },\n  caution: {\n    icon: AlertTriangle,\n    badge: \"destructive\",\n    color: \"text-destructive\",\n    label: \"Use Caution\",\n  },\n} as const;\n\nexport function SafetyCard({ location, safetyLevel, crimeRate, description, lastUpdated }: SafetyCardProps) {\n  const config = safetyConfig[safetyLevel];\n  const Icon = config.icon;\n\n  return (\n    <Card className=\"hover-elevate\" data-testid={`card-safety-${location.toLowerCase().replace(/\\s+/g, '-')}`}>\n      <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n        <div className=\"flex-1\">\n          <CardTitle className=\"text-lg\" data-testid=\"text-location\">{location}</CardTitle>\n          <CardDescription className=\"text-xs mt-1\">Updated {lastUpdated}</CardDescription>\n        </div>\n        <Badge variant={config.badge as any} data-testid=\"badge-safety-level\">\n          <Icon className=\"h-3 w-3 mr-1\" />\n          {config.label}\n        </Badge>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-3\">\n          <div>\n            <div className=\"flex items-baseline justify-between mb-1\">\n              <span className=\"text-sm text-muted-foreground\">Crime Rate</span>\n              <span className={`text-2xl font-bold ${config.color}`} data-testid=\"text-crime-rate\">\n                {crimeRate}\n              </span>\n            </div>\n            <div className=\"h-2 bg-muted rounded-full overflow-hidden\">\n              <div\n                className={`h-full ${\n                  safetyLevel === \"safe\" ? \"bg-success\" : \n                  safetyLevel === \"moderate\" ? \"bg-warning\" : \"bg-destructive\"\n                }`}\n                style={{ width: `${Math.min(crimeRate, 100)}%` }}\n              />\n            </div>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">{description}</p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2548},"client/src/components/ui/toast.tsx":{"content":"\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\nimport { cn } from \"../../lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\nexport {\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":3899},"client/src/pages/Hotels.jsx":{"content":"\nimport { useState } from 'react';\nimport SearchBar from '../components/SearchBar';\nimport HotelCard from '../components/HotelCard';\nimport { geocode } from '../lib/geocode';\n\n// Hotel amenity types for filtering\nconst HOTEL_AMENITIES = [\n  { value: 'hotel', label: 'Hotel' },\n  { value: 'motel', label: 'Motel' },\n  { value: 'hostel', label: 'Hostel' },\n  { value: 'guest_house', label: 'Guest House' },\n  { value: 'apartment', label: 'Apartment' },\n  { value: 'chalet', label: 'Chalet' },\n  { value: 'resort', label: 'Resort' },\n  { value: 'bed_and_breakfast', label: 'B&B' },\n  { value: 'camping', label: 'Camping' },\n  { value: 'caravan_site', label: 'Caravan Site' },\n];\n\nexport default function Hotels() {\n  const [hotels, setHotels] = useState([]);\n  const [userLocation, setUserLocation] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [selectedFilters, setSelectedFilters] = useState([]);\n  const [showFilters, setShowFilters] = useState(false);\n\n  const handleSearch = async (query) => {\n    setIsLoading(true);\n    setError(null);\n    setHotels([]);\n\n    try {\n      const location = await geocode(query);\n      \n      if (!location) {\n        setError('Location not found. Please try a different search.');\n        setIsLoading(false);\n        return;\n      }\n\n      setUserLocation(location);\n\n      const response = await fetch(\n        `http://localhost:5000/places?lat=${location.lat}&lng=${location.lng}&type=hotel`\n      );\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch hotels');\n      }\n\n      const data = await response.json();\n      \n      if (data.success) {\n        setHotels(data.places || []);\n      } else {\n        throw new Error(data.error || 'Unknown error');\n      }\n    } catch (err) {\n      console.error('Search error:', err);\n      setError('An error occurred while searching for hotels. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const toggleFilter = (filterValue) => {\n    setSelectedFilters(prev => {\n      if (prev.includes(filterValue)) {\n        return prev.filter(f => f !== filterValue);\n      } else {\n        return [...prev, filterValue];\n      }\n    });\n  };\n\n  const clearFilters = () => {\n    setSelectedFilters([]);\n  };\n\n  const filteredHotels = selectedFilters.length > 0\n    ? hotels.filter(hotel => {\n        const hotelTypes = [\n          hotel.tags.tourism,\n          hotel.tags.amenity,\n        ].filter(Boolean);\n        \n        return selectedFilters.some(filter => \n          hotelTypes.includes(filter)\n        );\n      })\n    : hotels;\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <h1 className=\"text-4xl font-bold mb-6\">Find Safe Hotels</h1>\n      <p className=\"text-lg text-gray-600 mb-6\">\n        Discover hotels in safe neighborhoods with high security ratings\n      </p>\n      \n      <SearchBar \n        onSearch={handleSearch} \n        placeholder=\"Search for hotels by location (e.g., 'Paris', 'Rome')...\" \n      />\n\n      {isLoading && (\n        <div className=\"mt-8 text-center\">\n          <div className=\"inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n          <p className=\"mt-4 text-gray-600\">Searching for hotels...</p>\n        </div>\n      )}\n\n      {error && (\n        <div className=\"mt-8 p-4 bg-red-50 border border-red-200 rounded-lg\">\n          <p className=\"text-red-800\">{error}</p>\n        </div>\n      )}\n\n      {!isLoading && hotels.length > 0 && (\n        <div className=\"mt-8\">\n          <div className=\"mb-6\">\n            <button\n              onClick={() => setShowFilters(!showFilters)}\n              className=\"flex items-center gap-2 px-4 py-2 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors\"\n            >\n              <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z\" />\n              </svg>\n              Filter by Type ({selectedFilters.length})\n            </button>\n\n            {showFilters && (\n              <div className=\"mt-4 p-4 bg-gray-50 rounded-lg border border-gray-200\">\n                <div className=\"flex justify-between items-center mb-3\">\n                  <h3 className=\"font-semibold\">Filter by Hotel Type</h3>\n                  {selectedFilters.length > 0 && (\n                    <button\n                      onClick={clearFilters}\n                      className=\"text-sm text-blue-600 hover:text-blue-700\"\n                    >\n                      Clear all\n                    </button>\n                  )}\n                </div>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-5 gap-2\">\n                  {HOTEL_AMENITIES.map(type => (\n                    <label\n                      key={type.value}\n                      className=\"flex items-center gap-2 p-2 rounded hover:bg-gray-100 cursor-pointer\"\n                    >\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedFilters.includes(type.value)}\n                        onChange={() => toggleFilter(type.value)}\n                        className=\"rounded text-blue-600\"\n                      />\n                      <span className=\"text-sm\">{type.label}</span>\n                    </label>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n\n          <div className=\"mb-4\">\n            <p className=\"text-gray-700\">\n              Found <span className=\"font-semibold\">{filteredHotels.length}</span> hotel\n              {filteredHotels.length !== 1 ? 's' : ''} near{' '}\n              <span className=\"font-semibold\">{userLocation?.display_name}</span>\n            </p>\n          </div>\n\n          {filteredHotels.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredHotels.map(hotel => (\n                <HotelCard\n                  key={hotel.id}\n                  hotel={hotel}\n                  userLat={userLocation?.lat}\n                  userLng={userLocation?.lng}\n                />\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12 bg-gray-50 rounded-lg\">\n              <p className=\"text-gray-600\">No hotels match your selected filters.</p>\n              <button\n                onClick={clearFilters}\n                className=\"mt-4 text-blue-600 hover:text-blue-700\"\n              >\n                Clear filters\n              </button>\n            </div>\n          )}\n        </div>\n      )}\n\n      {!isLoading && !error && hotels.length === 0 && (\n        <div className=\"mt-8 text-center py-12 bg-gray-50 rounded-lg\">\n          <svg \n            className=\"w-16 h-16 mx-auto text-gray-400 mb-4\" \n            fill=\"none\" \n            stroke=\"currentColor\" \n            viewBox=\"0 0 24 24\"\n          >\n            <path \n              strokeLinecap=\"round\" \n              strokeLinejoin=\"round\" \n              strokeWidth={2} \n              d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" \n            />\n          </svg>\n          <p className=\"text-gray-600\">Search for a location to find nearby hotels</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":7485}},"version":2}